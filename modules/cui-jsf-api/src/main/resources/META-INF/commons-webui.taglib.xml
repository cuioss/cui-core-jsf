<?xml version="1.0" encoding="UTF-8"?>
<facelet-taglib version="2.2" xmlns="http://xmlns.jcp.org/xml/ns/javaee"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-facelettaglibrary_2_2.xsd">
    <namespace>http://www.icw.de/commons-webui</namespace>
    <tag>
        <description><![CDATA[Formatting converter for creating / resolving the label of a given CodeType. It
            uses the standard LocaleProducerAccessor for accessing the needed Locale]]></description>
        <tag-name>codeTypeDisplayConverter</tag-name>
        <converter>
            <converter-id>de.cuioss.jsf.components.converter.CodeTypeDisplayConverter</converter-id>
        </converter>
    </tag>
    <tag>
        <description><![CDATA[Converter utilized for drop-down elements. The instanceMap is utilized for the
            mapping between the serializable keys and the corresponding model classes. The keys must
            be Serializable because they are sent to the client. The corresponding toString() method
            must return a String representation that can be used for key lookup within the map. The
            lookup is implemented to fail fast, saying for both ways, getAsObject(FacesContext,
            UIComponent, String) and getAsString(FacesContext, UIComponent, Object) the references
            will be checked, whether they are contained within the instanceMap, throwing a
            ConverterException if it doesn't.]]>
        </description>
        <tag-name>mapInstanceConverter</tag-name>
        <converter>
            <converter-id>mapInstanceConverter</converter-id>
        </converter>
        <attribute>
            <description><![CDATA[The map being referenced]]></description>
            <name>instanceMap</name>
            <required>true</required>
            <type>java.util.Map</type>
        </attribute>
    </tag>
    <tag>
        <description><![CDATA[Utilized for sanitizing String inputs in order to prevent script injection or
            Html code that possibly corrupts layout.]]></description>
        <tag-name>sanitizer</tag-name>
        <converter>
            <converter-id>de.cuioss.jsf.components.converter.HtmlSanitizingConverter</converter-id>
        </converter>
        <attribute>
            <description><![CDATA[Defines the strategy for sanitizing. One of "PLAIN_TEXT", "SIMPLE_HTML",
                "COMPLEX_HTML" expected (Case insensitive). If you want to disable the sanitizing
                for this converter you can use "PASSTHROUGH" but the implementor must ensure
                document that the sanitizing is done in an other way, like on the model. To preserve
                html-entities use "PLAIN_TEXT_PRESERVE_ENTITIES" or
                "COMPLEX_HTML_PRESERVE_ENTITIES". See de.cuioss.jsf.api.security.CuiSanitizer
                for details for the corresponding sanitizer. It defaults to
                "PLAIN_TEXT_PRESERVE_ENTITIES"]]></description>
            <name>strategy</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
    </tag>
    <tag>
        <description><![CDATA[Converter to display a Date as pretty time. It works with 'java.util.Date',
            'java.util.Calendar', 'java.time.LocalDateTime', 'java.time.ZonedDateTime' or
            'java.time.LocalDate'. If it detects a java.time.LocalDate it uses
            java.time.LocalDate.atStartOfDay() in order to set a defined point in time. It loads the
            current Locale using the LocaleProducerAccessor. If you want to use it you need
            prettytime at runtime
    <groupId>org.ocpsoft.prettytime</groupId>
    <artifactId>prettytime</artifactId>]]>
        </description>
        <tag-name>prettyTimeConverter</tag-name>
        <converter>
            <converter-id>com.icw.cui.converter.PrettyTimeConverter</converter-id>
        </converter>
    </tag>
    <tag>
        <description><![CDATA[Simple wrapping converter for de.cuioss.uimodel.util.TextSplitter. It is a
            formatting only converter]]>
        </description>
        <tag-name>textSplitter</tag-name>
        <converter>
            <converter-id>de.cuioss.jsf.components.converter.TextSplittingConverter</converter-id>
        </converter>
        <attribute>
            <description><![CDATA[Count of characters when a text break will forced, defaults to
                15]]></description>
            <name>forceLengthBreakCount</name>
            <required>false</required>
            <type>int</type>
        </attribute>
        <attribute>
            <description><![CDATA[Count of characters until the complete text will be abridged, defaults to
                4096]]></description>
            <name>abridgedLengthCount</name>
            <required>false</required>
            <type>int</type>
        </attribute>
    </tag>
    <tag>
        <description><![CDATA[Converts a plain text to a sanitized html text with configurable line
            breaks]]></description>
        <tag-name>lineBreakConverter</tag-name>
        <converter>
            <converter-id>cui.core.lineBreakConverter</converter-id>
        </converter>
        <attribute>
            <description>The delimiter. It defaults to "&lt;br /&gt;".</description>
            <name>delimiter</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description><![CDATA[Defines the strategy for sanitizing. See
                de.cuioss.jsf.api.security.CuiSanitizer for details. It defaults to
                "PLAIN_TEXT_PRESERVE_ENTITIES"]]></description>
            <name>sanitizingStrategy</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
    </tag>
    <tag>
        <description><![CDATA[Validates the content of a input text as email. Is configurable.
                It defaults to "^[^@]+@[^@]+$" ...what means email must start with something other than "@" followed by "@" end end with something other than "@".]]></description>
        <tag-name>emailValidator</tag-name>
        <validator>
            <validator-id>emailValidator</validator-id>
        </validator>
        <attribute>
            <description><![CDATA[The pattern to validate email against]]></description>
            <name>pattern</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
    </tag>
    <tag>
        <description>
            <![CDATA[Renders a message list. It is based on h:messages but iimplicitly set Bootstrap-styling]]></description>
        <tag-name>messages</tag-name>
        <component>
            <component-type>com.icw.cui.bootstrap.cuimessages</component-type>
            <renderer-type>javax.faces.Messages</renderer-type>
        </component>
        <attribute>
            <description>
                <![CDATA[Client identifier of the component for which to display
                messages. This
                attribute is mutually exclusive with globalOnly and take
                precedence
                if used.]]>
            </description>
            <name>for</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Flag indicating that only global messages (that is, messages not
                associated with any client identifier) are to be displayed.
                Default value is "false".]]>
            </description>
            <name>globalOnly</name>
            <required>false</required>
            <type>java.lang.Boolean</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[The component identifier for this component. This value must be
                unique within the closest parent component that is a naming]]>
                container.
            </description>
            <name>id</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[ Flag indicating whether or not this component should be rendered
                (during Render Response Phase), or processed on any subsequent
                form submit. The default value for this property is true.]]>
            </description>
            <name>rendered</name>
            <required>false</required>
            <type>java.lang.Boolean</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Flag indicating whether the detail portion of displayed messages
                should be included. Default value is "false".]]>
            </description>
            <name>showDetail</name>
            <required>false</required>
            <type>java.lang.Boolean</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Flag indicating whether the summary portion of displayed
                messages
                should be included. Default value is "true".]]>
            </description>
            <name>showSummary</name>
            <required>false</required>
            <type>java.lang.Boolean</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Direction indication for text that does not inherit
                directionality.
                Valid values are "LTR" (left-to-right) and "RTL"
                (right-to-left).]]>
            </description>
            <name>dir</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Code describing the language used in the generated markup
                for this component.]]>
            </description>
            <name>lang</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[The type of layout markup to use when rendering
                error messages. Valid values are "table" (an HTML
                table) and "list" (an HTML list). If not specified,
                the default value is "list".]]>
            </description>
            <name>layout</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Advisory title information about markup elements generated
                for this component.]]>
            </description>
            <name>title</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[The ValueExpression linking this component to a property in a
                backing bean]]>
            </description>
            <name>binding</name>
            <required>false</required>
            <type>javax.faces.component.UIComponent</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Space-separated list of CSS style class(es) to be applied additionally
                when this element is rendered.]]>
            </description>
            <name>styleClass</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[ CSS style(s) to be applied when this component is rendered.
               Caution: The styleClass attribute is always to be preferred.]]>
            </description>
            <name>style</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
    </tag>
    <tag>
        <description>
            <![CDATA[
           <p>
            Renders a bootstrap style badge. In essence it is an h:outputText with additional configuration
               The title is resolved using the cui standard label-resolving mechanism.</p>
            <p>A list of all available icons can be found at the <a href="https://cui-ux-trunk.ci.dev.icw.int:16000/cui-reference-documentation/faces/pages/documentation/cui_components/demo/miscellaneous.jsf">Reference Documentation</a> </p>
            <h3>Usage</h3>
                <table>
                    <tr>
                        <td><pre>&lt;cui:badge value="1" /&gt;</pre></td>
                        <td><span class="badge">1</span></td>
                    </tr>
                 </table>
             <h3>Styling</h3>
                 <ul>
                     <li>The marker css class is badge</li>
                 </ul>
       ]]>
        </description>
        <tag-name>badge</tag-name>
        <component>
            <component-type>com.icw.cui.bootstrap.badge</component-type>
            <renderer-type>javax.faces.Text</renderer-type>
        </component>
        <attribute>
            <description><![CDATA[The component identifier for this component. This value must be
                unique within the closest parent component that is a naming
                container.]]>
            </description>
            <name>id</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description><![CDATA[Flag indicating whether or not this component should be rendered
                (during Render Response Phase), or processed on any subsequent
                form submit. The default value for this property is true.]]>
            </description>
            <name>rendered</name>
            <required>false</required>
            <type>boolean</type>
        </attribute>
        <attribute>
            <description><![CDATA[Flag indicating that characters that are sensitive in HTML and XML markup must be escaped.
            This flag is set to "true" by default. ]]>
            </description>
            <name>escape</name>
            <required>false</required>
            <type>java.lang.Boolean</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Space-separated list of CSS style class(es) to be applied additionally when
                this element is rendered.]]>
            </description>
            <name>styleClass</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[ CSS style(s) to be applied when this component is rendered.
               Caution: The styleClass attribute is always to be preferred.]]>
            </description>
            <name>style</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[The ValueExpression linking this component to a property in a backing bean.]]>
            </description>
            <name>binding</name>
            <required>false</required>
            <type>javax.faces.component.UIComponent</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Converter instance registered with this component. ]]>
            </description>
            <name>converter</name>
            <required>false</required>
            <type>javax.faces.convert.Converter</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Direction indication for text that does not inherit directionality. Valid values are "LTR" (left-to-right) and "RTL" (right-to-left). ]]>
            </description>
            <name>dir</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Code describing the language used in the generated markup for this component.]]>
            </description>
            <name>lang</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Per the WAI-ARIA spec and its relationship to HTML5 (Section title ARIA Role Attriubute), every HTML element may have a "role"
                attribute whose value must be passed through unmodified on the element on which it is declared in the final rendered markup.
                The attribute, if specified, must have a value that is a string literal that is, or an EL Expression that evaluates to,
                a set of space-separated tokens representing the various WAI-ARIA roles that the element belongs to.
                It is the page author's responsibility to ensure that the user agent is capable of correctly interpreting the value of this attribute.]]>
            </description>
            <name>role</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[The key for looking up the text to be rendered as title-attribute
                Although this attribute is not required you must provide either this or #titleValue if you want a title to be rendered.
                If both are present #titleValue will take precedence]]>
            </description>
            <name>titleKey</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[The value for the title-attribute
                Although this attribute is not required you must provide either this or #titleKey if you want a title to be rendered.
                If both are present #titleValue will take precedence]]>
            </description>
            <name>titleValue</name>
            <required>false</required>
            <type>java.lang.Object</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[The current value of this component.]]>
            </description>
            <name>value</name>
            <required>false</required>
            <type>java.io.Serializable</type>
        </attribute>
    </tag>
    <tag>
        <description><![CDATA[Renders a fieldset.]]></description>
        <tag-name>fieldset</tag-name>
        <component>
            <component-type>de.cuioss.jsf.api.html.fieldset</component-type>
            <renderer-type>de.cuioss.jsf.api.html.fieldset_renderer</renderer-type>
        </component>
        <attribute>
            <description><![CDATA[The component identifier for this component. This value must be unique
                within the closest parent component that is a naming container. Caution: The
                component itself is not a naming container]]>
            </description>
            <name>id</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description><![CDATA[Defines whether all controls within this fieldset are disabled. Defaults to
                false.]]>
            </description>
            <name>disabled</name>
            <required>false</required>
            <type>boolean</type>
        </attribute>
        <attribute>
            <description><![CDATA[Flag indicating whether or not this component should be rendered (during
                Render Response Phase), or processed on any subsequent form submit. The default
                value for this property is true.]]>
            </description>
            <name>rendered</name>
            <required>false</required>
            <type>boolean</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[The key for looking up the text display as the legend. Although this
                attribute is not required the developer must provide either this or #legendValue if
                you want a legend to be displayed]]>
            </description>
            <name>legendKey</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[The String displayed for the legend. This is a replacement for #legendKey.
                If both are present legendValue takes precedence. If the type is not
                java.lang.String the developer must ensure that an according converter for the
                exists.]]>
            </description>
            <name>legendValue</name>
            <required>false</required>
            <type>java.io.Serializable</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Indicates whether the legend is to be escaped on output or not. Default is
                true.]]>
            </description>
            <name>legendEscape</name>
            <required>false</required>
            <type>boolean</type>
        </attribute>
        <attribute>
            <description><![CDATA[The optional converter to be used in case of legendValue is set and needs
                conversion. The converter attribute sets the converter instance to be registered for
                this component. It must match the converter-id value of a converter element defined
                in your Faces configuration file.]]>
            </description>
            <name>legendConverter</name>
            <required>false</required>
            <type>javax.faces.convert.Converter</type>
        </attribute>
    </tag>
    <tag>
        <description>
            <![CDATA[
             <p>
               Renders a bootstrap conform div with the styleClass 'form-group'.
            </p>
            <p>
            The layout relies completely on the grid-system of twitter-bootstrap,
            see <a href="http://getbootstrap.com/css/#grid">Bootstrap Documentation</a>
            </p>
            <ul>
				<li>Form-Groups are similar to rows but within a form-context</li>
				<li>Use rows to create horizontal groups of columns.</li>
            </ul>
            <p>
               More information and
               examples can be found in the <a href="https://cui-ux-trunk.ci.dev.icw.int:16000/cui-reference-documentation/faces/pages/documentation/cui_components/demo/layout.jsf" >Reference Documentation</a></p>
            <h3>Usage</h3>
                <pre>&lt;cui:formGroup /&gt;</pre>
             <h3>Styling</h3>
             <ul>
                 <li>The marker css class is 'form-group'</li>
             </ul>
       ]]>
        </description>
        <tag-name>formGroup</tag-name>
        <component>
            <component-type>com.icw.cui.bootstrap.form_group</component-type>
            <renderer-type>com.icw.cui.bootstrap.layout_renderer</renderer-type>
        </component>
        <attribute>
            <description><![CDATA[The component identifier for this component. This value must be
                unique within the closest parent component that is a naming
                container. Caution: The component itself is not a naming container]]>
            </description>
            <name>id</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description><![CDATA[Flag indicating whether or not this component should be rendered
                (during Render Response Phase), or processed on any subsequent
                form submit.  The default value for this property is true.]]>
            </description>
            <name>rendered</name>
            <required>false</required>
            <type>boolean</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Space-separated list of CSS style class(es) to be applied additionally when
                this element is rendered.]]>
            </description>
            <name>styleClass</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[CSS style(s) to be applied when this component is rendered.
               Caution: The styleClass attribute is always to be preferred.]]>
            </description>
            <name>style</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
    </tag>
    <tag>
        <description>
            <![CDATA[
             <p>
               Renders a bootstrap conform div with the styleClass 'input-group'.
				An input group groups a number of input elements to be displayed as one element.
            </p>
            <p>
            The layout relies completely on the grid-system of twitter-bootstrap,
            see <a href="http://getbootstrap.com/css/#grid">Bootstrap Documentation</a>
            </p>
            <p>
               More information and
               examples can be found in the <a href="https://cui-ux-trunk.ci.dev.icw.int:16000/cui-reference-documentation/faces/pages/documentation/cui_components/demo/layout.jsf" >Reference Documentation</a></p>
            <h3>Usage</h3>
                <pre>&lt;cui:inputGroup /&gt;</pre>
             <h3>Styling</h3>
             <ul>
                 <li>The marker css class is 'input-group'</li>
             </ul>
       ]]>
        </description>
        <tag-name>inputGroup</tag-name>
        <component>
            <component-type>com.icw.cui.bootstrap.input_group</component-type>
            <renderer-type>com.icw.cui.bootstrap.layout_renderer</renderer-type>
        </component>
        <attribute>
            <description><![CDATA[The component identifier for this component. This value must be
                unique within the closest parent component that is a naming
                container. Caution: The component itself is not a naming container]]>
            </description>
            <name>id</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description><![CDATA[Flag indicating whether or not this component should be rendered
                (during Render Response Phase), or processed on any subsequent
                form submit.  The default value for this property is true.]]>
            </description>
            <name>rendered</name>
            <required>false</required>
            <type>boolean</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Space-separated list of CSS style class(es) to be applied additionally when
                this element is rendered.]]>
            </description>
            <name>styleClass</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[CSS style(s) to be applied when this component is rendered.
               Caution: The styleClass attribute is always to be preferred.]]>
            </description>
            <name>style</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
    </tag>
    <tag>
        <description><![CDATA[An extension to h:commandButton that conforms to Bootstrap styling and
            incorporates the display of icons. Caution: do not use the value attribute but the
            corresponding labelKey / labelValue. The same goes for the title element: use titleKey
            or titleValue. It will always be rendered as a button (visually) unless you set state to 'link'.]]>
        </description>
        <tag-name>commandButton</tag-name>
        <component>
            <component-type>de.cuioss.jsf.api.bootstrap.commandbutton</component-type>
            <renderer-type>de.cuioss.jsf.api.bootstrap.commandbutton_renderer</renderer-type>
        </component>
        <attribute>
            <description><![CDATA[The component identifier for this component. This value must be unique
                within the closest parent component that is a naming container. Caution: The
                component itself is not a naming container]]>
            </description>
            <name>id</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description><![CDATA[Flag indicating whether or not this component should be rendered (during
                Render Response Phase), or processed on any subsequent form submit. The default
                value for this property is true. ]]></description>
            <name>rendered</name>
            <required>false</required>
            <type>boolean</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Space-separated list of CSS style class(es) to be applied additionally
                when this element is rendered.]]>
            </description>
            <name>styleClass</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[CSS style(s) to be applied when this component is rendered. Caution: The
                styleClass attribute is always to be preferred.]]>
            </description>
            <name>style</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description><![CDATA[The key-binding for this button, aka keyboard shortcut. The key will be
                bound as onClickHandler. Caution: The implementor must ensure that there is only one
                button for the same type existent per page, otherwise the behavior is
                non-deterministic. Allowed keys: esc, enter, delete, tab.]]></description>
            <name>keyBinding</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Different general styles available (state): one of 'primary', 'success',
                'info', 'warning', 'danger', 'link'. If none of those is set it uses 'default'.]]>
            </description>
            <name>state</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Sets the size for the button element, must be one of the appropriate
                bootstrap size prefixes, currently supported is 'default', 'sm' and 'lg']]>
            </description>
            <name>size</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[The key for looking up the text display as the label. Although this
                attribute is not required the developer must provide either this or #labelValue if
                you want a label to be displayed ]]></description>
            <name>labelKey</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[The String displayed for the label. This is a replacement for #labelKey.
                If both are present labelValue takes precedence. If the type is not java.lang.String
                the developer must ensure that an according converter for the exists.]]>
            </description>
            <name>labelValue</name>
            <required>false</required>
            <type>java.io.Serializable</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[The key for looking up the text display as the title. Although this
                attribute is not required the developer must provide either this or #titleValue if
                you want a title to be displayed]]>
            </description>
            <name>titleKey</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[The String displayed for the title. This is a replacement for
                #titleKey. If both are present titleValue takes precedence.]]>
            </description>
            <name>titleValue</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[A defined optional icon class, defined within stylesheet, e.g. cui-icon-warning. In
                order to prevent improper usage the matching is restricted to the prefixes:
                "cui-icon, cui-mime-type, ui-icon-". If none of them is matched the access throws an
                IllegalArgumentException.]]>
            </description>
            <name>icon</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Defines the optional alignment of the icon. Supported values
                are 'left' or 'right']]>
            </description>
            <name>iconAlign</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[MethodExpression representing the application action to invoke
                when this component is activated by the user.  The expression
                must evaluate to a public method that takes no parameters, and
                returns an Object (the toString() of which is called to derive
                the logical outcome) which is passed to the NavigationHandler
                for this application.]]>
            </description>
            <name>action</name>
            <required>false</required>
            <method-signature>java.lang.Object action()</method-signature>
        </attribute>
        <attribute>
            <description>
                <![CDATA[
                MethodExpression representing an action listener method that
                will be notified when this component is activated by the user.
                The expression must evaluate to a public method that takes an
                ActionEvent parameter, with a return type of void, <span
                class="changed_added_2_0">or to a public method that takes no
                arguments with a return type of void.  In the latter case, the
                method has no way of easily knowing where the event came from,
                but this can be useful in cases where a notification is needed
                that "some action happened".

                ]]>
            </description>
            <name>actionListener</name>
            <required>false</required>
            <method-signature>void actionListener(javax.faces.event.ActionEvent)</method-signature>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Flag indicating that, if this component is activated by the user,
                notifications should be delivered to interested listeners and actions
                immediately (that is, during Apply Request Values phase) rather than
                waiting until Invoke Application phase.]]>
            </description>
            <name>immediate</name>
            <required>false</required>
            <type>boolean</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Access key that, when pressed, transfers focus
                to this element.]]>
            </description>
            <name>accesskey</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Alternate textual description of the
                element rendered by this component.]]>
            </description>
            <name>alt</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Direction indication for text that does not inherit directionality.
                Valid values are "LTR" (left-to-right) and "RTL" (right-to-left).
                These attributes are case sensitive when rendering to XHTML, so
                care must be taken to have the correct case.]]>
            </description>
            <name>dir</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Flag indicating that this element must never receive focus or
                be included in a subsequent submit.  A value of false causes
                no attribute to be rendered, while a value of true causes the
                attribute to be rendered as disabled="disabled".]]>
            </description>
            <name>disabled</name>
            <required>false</required>
            <type>boolean</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[
                Absolute or relative URL of the
                image to be displayed for this
                button.  If specified, this
                "input" element will be of type
                "image".  Otherwise, it will be
                of the type specified by the
                "type" property with a label
                specified by the "value"
                property.  <span
                class="changed_added_2_0">Note
                that if the value of this
                attribute starts with "/", the
                rendered value for this
                attribute will be prefixed with
                the context-root for this
                application.
                ]]>
            </description>
            <name>image</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Code describing the language used in the generated markup
                for this component.]]>
            </description>
            <name>lang</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Javascript code executed when this element loses focus.]]>
            </description>
            <name>onblur</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Javascript code executed when this element loses focus
                and its value has been modified since gaining focus.]]>
            </description>
            <name>onchange</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Javascript code executed when a pointer button is
                clicked over this element.]]>
            </description>
            <name>onclick</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Javascript code executed when a pointer button is
                double clicked over this element.]]>
            </description>
            <name>ondblclick</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Javascript code executed when this element receives focus.]]>
            </description>
            <name>onfocus</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Javascript code executed when a key is
                pressed down over this element.]]>
            </description>
            <name>onkeydown</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Javascript code executed when a key is
                pressed and released over this element.]]>
            </description>
            <name>onkeypress</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Javascript code executed when a key is
                released over this element.]]>
            </description>
            <name>onkeyup</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Javascript code executed when a pointer button is
                pressed down over this element.]]>
            </description>
            <name>onmousedown</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Javascript code executed when a pointer button is
                moved within this element.]]>
            </description>
            <name>onmousemove</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Javascript code executed when a pointer button is
                moved away from this element.]]>
            </description>
            <name>onmouseout</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Javascript code executed when a pointer button is
                moved onto this element.]]>
            </description>
            <name>onmouseover</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Javascript code executed when a pointer button is
                released over this element.]]>
            </description>
            <name>onmouseup</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Javascript code executed when text within this
                element is selected by the user.]]>
            </description>
            <name>onselect</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Flag indicating that this component will prohibit changes by
                the user.  The element may receive focus unless it has also
                been disabled.  A value of false causes
                no attribute to be rendered, while a value of true causes the
                attribute to be rendered as readonly="readonly".]]>
            </description>
            <name>readonly</name>
            <required>false</required>
            <type>boolean</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Per the WAI-ARIA spec and its
                relationship to HTML5 (Section title ARIA Role Attriubute),
                every HTML element may have a "role" attribute whose value
                must be passed through unmodified on the element on which it
                is declared in the final rendered markup.  The attribute, if
                specified, must have a value that is a string literal that is,
                or an EL Expression that evaluates to, a set of
                space-separated tokens representing the various WAI-ARIA roles
                that the element belongs to.
                It is the page author's
                responsibility to ensure that the user agent is capable of
                correctly interpreting the value of this attribute.]]>
            </description>
            <name>role</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Position of this element in the tabbing order
                for the current document.  This value must be
                an integer between 0 and 32767.]]>
            </description>
            <name>tabindex</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Type of button to create.  Valid values are "submit", "button",
                and "reset".  If not specified, or not a valid value, the default
                value is "submit".]]>
            </description>
            <name>type</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[The ValueExpression linking this component to a property in a backing bean]]>
            </description>
            <name>binding</name>
            <required>false</required>
            <type>javax.faces.component.UIComponent</type>
        </attribute>
    </tag>
    <tag>
        <description>
            <![CDATA[Renders a checkbox as a switch.
            It will be implicitly wrapped in a column element.
            ]]>
        </description>
        <tag-name>switch</tag-name>
        <component>
            <component-type>de.cuioss.jsf.api.bootstrap.switch</component-type>
            <renderer-type>de.cuioss.jsf.api.bootstrap.switch_renderer</renderer-type>
        </component>
        <attribute>
            <description>
                <![CDATA[Space-separated list of CSS style class(es) to be applied additionally
                when this element is rendered.]]>
            </description>
            <name>styleClass</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[CSS style(s) to be applied when this component is rendered. Caution: The
                styleClass attribute is always to be preferred.]]>
            </description>
            <name>style</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Layout size, default is 6]]>
            </description>
            <name>size</name>
            <required>false</required>
            <type>java.lang.Integer</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[The key for looking up the text display as the title. Although this
                attribute is not required the developer must provide either this or #titleValue if
                you want a title to be displayed]]>
            </description>
            <name>titleKey</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[The String displayed for the title. This is a replacement for
                #titleKey. If both are present titleValue takes precedence.]]>
            </description>
            <name>titleValue</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[The optional converter to be used in case of titleValue is set and needs
                conversion.]]>
            </description>
            <name>titleConverter</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[The key for looking up the text that will be shown if the witch is set to 'true'.
                Although this attribute is not required the developer must provide either this or #onTextValue if you want a title to be displayed]]>
            </description>
            <name>onTextKey</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[The text that will be shown if the witch is set to 'true'. This is a replacement for #onTextKey.
                 If both are present onTextValue takes precedence. If the type is not java.lang.String the
                 developer must ensure that an according converter for the object exists.]]>
            </description>
            <name>onTextValue</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[The optional converter to be used in case of onTextValue is set and needs
                conversion.]]>
            </description>
            <name>onTextConverter</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[The key for looking up the text that will be shown if the witch is set to 'false'.
                Although this attribute is not required the developer must provide either this or #offTextValue if you want a title to be displayed]]>
            </description>
            <name>offTextKey</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[The text that will be shown if the witch is set to 'false'. This is a replacement for #offTextKey.
                 If both are present offTextValue takes precedence. If the type is not java.lang.String the
                 developer must ensure that an according converter for the object exists.]]>
            </description>
            <name>offTextValue</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[The optional converter to be used in case of offTextValue is set and needs
                conversion.]]>
            </description>
            <name>offTextConverter</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[<p>
                MethodExpression representing a value change listener method
                that will be notified when a new value has been set for this
                input component. The expression must evaluate to a public
                method that takes a <code>ValueChangeEvent</code>
                parameter, with a return type of void, or to a public method
                that takes no arguments with a return type
                of void. In the latter case, the method has no way of easily
                knowing what the new value is, but this can be useful in cases
                where a notification is needed that "this value
                changed".</p>]]>
            </description>
            <name>valueChangeListener</name>
            <required>false</required>
            <method-signature>void valueChange(javax.faces.event.ValueChangeEvent)
            </method-signature>
        </attribute>
    </tag>
    <tag>
        <description><![CDATA[An extension to h:button that conforms to Bootstrap styling and incorporates the
            display of icons. If icon is set without labelKey / labelValue than only the icon will
            be rendered. Caution: do not use the value attribute but the corresponding labelKey /
            labelValue. The same goes for the title element: use titleKey or titleValue. It will
            always be rendered as a button (visually) unless you set the state 'link']]>
        </description>
        <tag-name>button</tag-name>
        <component>
            <component-type>de.cuioss.jsf.api.bootstrap.button</component-type>
            <renderer-type>de.cuioss.jsf.api.bootstrap.button_renderer</renderer-type>
        </component>
        <attribute>
            <description><![CDATA[The component identifier for this component. This value must be unique
                within the closest parent component that is a naming container. Caution: The
                component itself is not a naming container]]>
            </description>
            <name>id</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description><![CDATA[Flag indicating whether or not this component should be rendered (during
                Render Response Phase), or processed on any subsequent form submit. The default
                value for this property is true.]]>
            </description>
            <name>rendered</name>
            <required>false</required>
            <type>boolean</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Space-separated list of CSS style class(es) to be applied additionally
                when this element is rendered.]]>
            </description>
            <name>styleClass</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[CSS style(s) to be applied when this component is rendered. Caution: The
                styleClass attribute is always to be preferred.]]>
            </description>
            <name>style</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Different general styles available (state): one of 'primary', 'success',
                'info', 'warning', 'danger', 'link'. If none of those is set it uses 'default'.]]>
            </description>
            <name>state</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Sets the size for the button element, must be one of the appropriate
                bootstrap size prefixes, currently supported is 'default', 'sm' and 'lg']]>
            </description>
            <name>size</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description><![CDATA[The key-binding for this button, aka keyboard shortcut. The key will be
                bound as onClickHandler. Caution: The implementor must ensure that there is only one
                button for the same type existent per page, otherwise the behavior is
                non-deterministic. Allowed keys: esc, enter, delete, tab.]]></description>
            <name>keyBinding</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[The key for looking up the text display as the label. Although this
                attribute is not required the developer must provide either this or #labelValue if
                you want a label to be displayed]]>
            </description>
            <name>labelKey</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[The String displayed for the label. This is a replacement for #labelKey.
                If both are present labelValue takes precedence. If the type is not java.lang.String
                the developer must ensure that an according converter for the exists.]]>
            </description>
            <name>labelValue</name>
            <required>false</required>
            <type>java.io.Serializable</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[The key for looking up the text display as the title. Although this
                attribute is not required the developer must provide either this or #titleValue if
                you want a title to be displayed]]>
            </description>
            <name>titleKey</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[The String displayed for the title. This is a replacement for
                #titleKey. If both are present titleValue takes precedence.]]>
            </description>
            <name>titleValue</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[A defined icon class, defined within stylesheet, e.g. cui-icon-warning. In
                order to prevent improper usage the matching is restricted to the prefixes:
                "cui-icon, cui-mime-type, ui-icon-". If none of them is matched the access throws an
                IllegalArgumentException.]]>
            </description>
            <name>icon</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Defines the optional float alignment of the component. Supported values
                are 'left' or 'right']]>
            </description>
            <name>iconAlign</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Per the WAI-ARIA spec and its
                relationship to HTML5 (Section title ARIA Role Attriubute),
                every HTML element may have a "role" attribute whose value
                must be passed through unmodified on the element on which it
                is declared in the final rendered markup.  The attribute, if
                specified, must have a value that is a string literal that is,
                or an EL Expression that evaluates to, a set of
                space-separated tokens representing the various WAI-ARIA roles
                that the element belongs to.
                It is the page author's
                responsibility to ensure that the user agent is capable of
                correctly interpreting the value of this attribute.]]>
            </description>
            <name>role</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Disable appending the <code>ClientWindow</code> on the rendering of this element.]]>
            </description>
            <name>disableClientWindow</name>
            <required>false</required>
            <type>java.lang.Boolean</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Whether to include page parameters in the target URI.]]>
            </description>
            <name>includeViewParams</name>
            <required>false</required>
            <type>java.lang.Boolean</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[The logical outcome used to resolve a navigation case.]]>
            </description>
            <name>outcome</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Access key that, when pressed, transfers focus
                to this element.]]>
            </description>
            <name>accesskey</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[The character encoding of the resource designated
                by this hyperlink.]]>
            </description>
            <name>charset</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[The position and shape of the hot spot on the screen
                (for use in client-side image maps).]]>
            </description>
            <name>coords</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Direction indication for text that does not inherit directionality.
                Valid values are "LTR" (left-to-right) and "RTL" (right-to-left).]]>
            </description>
            <name>dir</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Flag indicating that this element must never
                receive focus or be included in a subsequent
                submit.]]>
            </description>
            <name>disabled</name>
            <required>false</required>
            <type>boolean</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[The identifier of the page fragment which should
                be brought into focus when the target page is
                rendered. The value of this attribute is appended
                to the end of target URL following a hash (#) mark.
                This notation is part of the standard URL syntax.]]>
            </description>
            <name>fragment</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[The language code of the resource designated
                by this hyperlink.]]>
            </description>
            <name>hreflang</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Code describing the language used in the generated markup
                for this component.]]>
            </description>
            <name>lang</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Javascript code executed when this element loses focus.]]>
            </description>
            <name>onblur</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Javascript code executed when a pointer button is
                clicked over this element.]]>
            </description>
            <name>onclick</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Javascript code executed when a pointer button is
                double clicked over this element.]]>
            </description>
            <name>ondblclick</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Javascript code executed when this element receives focus.]]>
            </description>
            <name>onfocus</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Javascript code executed when a key is
                pressed down over this element.]]>
            </description>
            <name>onkeydown</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Javascript code executed when a key is
                pressed and released over this element.]]>
            </description>
            <name>onkeypress</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Javascript code executed when a key is
                released over this element.]]>
            </description>
            <name>onkeyup</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Javascript code executed when a pointer button is
                pressed down over this element.]]>
            </description>
            <name>onmousedown</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Javascript code executed when a pointer button is
                moved within this element.]]>
            </description>
            <name>onmousemove</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Javascript code executed when a pointer button is
                moved away from this element.]]>
            </description>
            <name>onmouseout</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Javascript code executed when a pointer button is
                moved onto this element.]]>
            </description>
            <name>onmouseover</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Javascript code executed when a pointer button is
                released over this element.]]>
            </description>
            <name>onmouseup</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[The relationship from the current document
                to the anchor specified by this hyperlink.
                The value of this attribute is a space-separated
                list of link types.]]>
            </description>
            <name>rel</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[A reverse link from the anchor specified
                by this hyperlink to the current document.
                The value of this attribute is a space-separated
                list of link types.]]>
            </description>
            <name>rev</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[The shape of the hot spot on the screen
                (for use in client-side image maps).  Valid
                values are:  default (entire region); rect
                (rectangular region); circle (circular region);
                and poly (polygonal region).]]>
            </description>
            <name>shape</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Position of this element in the tabbing order
                for the current document.  This value must be
                an integer between 0 and 32767.]]>
            </description>
            <name>tabindex</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Name of a frame where the resource
                retrieved via this hyperlink is to
                be displayed.]]>
            </description>
            <name>target</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[The content type of the resource designated
                by this hyperlink.]]>
            </description>
            <name>type</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[The ValueExpression linking this component to a property in a backing bean]]>
            </description>
            <name>binding</name>
            <required>false</required>
            <type>javax.faces.component.UIComponent</type>
        </attribute>
    </tag>
    <tag>
        <description>
            <![CDATA[
           <p>
            Renders an Gender Icon regarding to the cui-icon contract. The icon is rendered within a span with the according classes.</p>
            <h3>Usage</h3>
                <table>
                    <tr>
                        <td><pre>&lt;cui:genderIcon genderString="male" size="xl" state="info"/&gt;</pre></td>
                        <td><span class="cui-icon cui-icon-gender_male cui-icon-xl cui-icon-state-info" title="Gender Male"></span></td>
                    </tr>
                 </table>
            <h2>Translation</h2>
            <p>The keys for the title are implicitly defined:
            <ul>
                <li>cui.model.gender.male.title</li>
                <li>cui.model.gender.female.title</li>
                <li>cui.model.gender.undefined.title</li>
                <li>cui.model.gender.other.title</li>
                <li>cui.model.gender.diverse.title</li>
                <li>cui.model.gender.unknown.title</li>
            </ul>
            </p>
       ]]>
        </description>
        <tag-name>genderIcon</tag-name>
        <component>
            <component-type>com.icw.cui.bootstrap.genderIcon</component-type>
            <renderer-type>com.icw.cui.bootstrap.icon_renderer</renderer-type>
        </component>
        <attribute>
            <description><![CDATA[The component identifier for this component. This value must be unique
                within the closest parent component that is a naming container. Caution: The
                component itself is not a naming container]]>
            </description>
            <name>id</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description><![CDATA[Flag indicating whether or not this component should be rendered (during
                Render Response Phase), or processed on any subsequent form submit. The default
                value for this property is true.]]>
            </description>
            <name>rendered</name>
            <required>false</required>
            <type>boolean</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Space-separated list of CSS style class(es) to be applied additionally
                when this element is rendered.]]>
            </description>
            <name>styleClass</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[CSS style(s) to be applied when this component is rendered. Caution: The
                styleClass attribute is always to be preferred.]]>
            </description>
            <name>style</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[A representation on a concrete gender icon. In case #gender and
                #genderString is defined #gender takes precedence.]]>
            </description>
            <name>gender</name>
            <required>false</required>
            <type>de.cuioss.uimodel.model.Gender</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[
                    String representation of a gender:
                     <ul>
                         <li>if String is null or empty: -> Gender#UNKNOWN</li>
                         <li>if String is "m" or "male": -> Gender#MALE</li>
                         <li>if String is "f" or "female": -> Gender#FEMALE</li>
                         <li>if String is "o" or "other": -> Gender#OTHER</li>
                         <li>if String is "d" or "diverse": -> Gender#DIVERSE</li>
                         <li>if String is "x" or "undefined": -> Gender#UNDEFINED</li>
                         <li>For all other strings it returns -> Gender#UNKNOWN</li>
                     </ul>
                     In case #gender and #genderString is defined #gender takes precedence
       ]]>
            </description>
            <name>genderString</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Different general styles available (state): one of 'primary', 'success',
                'info', 'warning', 'danger'. If none of those is set it uses 'default'.]]>
            </description>
            <name>state</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Adapts the size of the component. Supported values are 'lg', 'xl', 'xxl',
                'xxxl' based on bootstrap context-sizes. Default: no size is set.]]>
            </description>
            <name>size</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
    </tag>
    <tag>
        <description><![CDATA[Renders a toolbar component that can be pinned to top or bottom. Therefore the
            bootstrap affix plugin is used.
            <h3>Styling</h3>
            The sass module is defined within cui-styling, the name is 'com.icw.cui/_toolbar.scss
			<ul>
				<li>Renders the class 'toolbar'</li>
				<li>If the size is set it additionally renders the corresponding size -context class, e.g. toolbar-xl for
				size='xl'</li>
				<li>If it is pinned it additionally renders the class 'pinned'</li>
			</ul>]]>
        </description>
        <tag-name>toolbar</tag-name>
        <component>
            <component-type>com.icw.cui.bootstrap.toolbar</component-type>
            <renderer-type>com.icw.cui.bootstrap.layout_renderer</renderer-type>
        </component>
        <attribute>
            <description><![CDATA[The component identifier for this component. This value must be unique
                within the closest parent component that is a naming container. Caution: The
                component itself is not a naming container]]>
            </description>
            <name>id</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description><![CDATA[Flag indicating whether or not this component should be rendered (during
                Render Response Phase), or processed on any subsequent form submit. The default
                value for this property is true.]]>
            </description>
            <name>rendered</name>
            <required>false</required>
            <type>boolean</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Space-separated list of CSS style class(es) to be applied additionally
                when this element is rendered.]]>
            </description>
            <name>styleClass</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description><![CDATA[Indicates whether to pin this component to the top. The default value for
                this property is false.]]>
            </description>
            <name>pinToTop</name>
            <required>false</required>
            <type>boolean</type>
        </attribute>
        <attribute>
            <description><![CDATA[Indicates whether to pin this component to the bottom. The default value
                for this property is false.]]>
            </description>
            <name>pinToBottom</name>
            <required>false</required>
            <type>boolean</type>
        </attribute>
        <attribute>
            <description><![CDATA[Defines the offset of this component when pinned to top. The default value
                for this property is 5.]]>
            </description>
            <name>pinTopOffset</name>
            <required>false</required>
            <type>int</type>
        </attribute>
        <attribute>
            <description><![CDATA[Defines the offset of this component when pinned to bottom. The default
                value for this property is 5.]]>
            </description>
            <name>pinBottomOffset</name>
            <required>false</required>
            <type>int</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Sets the size for the element, must be one of the appropriate bootstrap
                size prefixes, e.g. lg, sm or xs]]>
            </description>
            <name>size</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[CSS style(s) to be applied when this component is rendered.
               Caution: The styleClass attribute is always to be preferred.]]>
            </description>
            <name>style</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
    </tag>
    <tag>
        <description>
            <![CDATA[
           <p>
            Renders an icon with a text. The icon is rendered as a span with the according classes.
               The label and icons are resolved using the cui standard label-resolving mechanism.</p>
            <p>Sample can be found at the <a href="https://cui-ux-trunk.ci.dev.icw.int:16000/cui-reference-documentation/faces/pages/documentation/icons/icon_components.jsf">Reference Documentation</a> </p>
            <h3>Usage</h3>
                <table>
                    <tr>
                        <td><pre>&lt;cui:labeledIcon icon="cui-icon-alarm" labelValue="Rrrring" titleValue="Some Title" /&gt; </pre></td>
                        <td><span title="Some Title" class="cui-labeled-icon"><span class="cui-icon cui-icon-alarm"></span><span class="cui-labeled-icon-text">Rrrring</span></span></td>
                    </tr>
                 </table>
             <h3>Styling</h3>
                 <ul>
                     <li>The marker css class is cui-labeled-icon</li>
                     <li>The label class is cui-labeled-icon-text</li>
                 </ul>
       ]]>
        </description>
        <tag-name>labeledIcon</tag-name>
        <component>
            <component-type>com.icw.cui.bootstrap.icon.labeled</component-type>
            <renderer-type>com.icw.cui.bootstrap.icon.labeled_renderer</renderer-type>
        </component>
        <attribute>
            <description><![CDATA[The component identifier for this component. This value must be unique
                within the closest parent component that is a naming container.]]>
            </description>
            <name>id</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description><![CDATA[Flag indicating whether or not this component should be rendered (during
                Render Response Phase), or processed on any subsequent form submit. The default
                value for this property is true.]]>
            </description>
            <name>rendered</name>
            <required>false</required>
            <type>boolean</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Space-separated list of CSS style class(es) to be applied additionally
                when this element is rendered. ]]></description>
            <name>styleClass</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[CSS style(s) to be applied when this component is rendered. Caution: The
                styleClass attribute is always to be preferred.]]>
            </description>
            <name>style</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description><![CDATA[The optional converter to be used in case of labelValue is set and needs
                conversion. The converter attribute sets the converter instance to be registered for
                this component. It must match the converter-id value of a converter element defined
                in your Faces configuration file.]]>
            </description>
            <name>labelConverter</name>
            <required>false</required>
            <type>javax.faces.convert.Converter</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[The key for looking up the text to be displayed as the text label.
                Although this attribute is not required you must provide either this or #labelValue
                if you want a label to be displayed.]]>
            </description>
            <name>labelKey</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[The Object representing the text to be displayed. This is a replacement
                for #labelKey. If both are present labelValue takes precedence. The object is
                usually a string. If not, the developer must ensure that a corresponding converter
                is either registered for the type or must provide the converter using
                #labelConverter]]>
            </description>
            <name>labelValue</name>
            <required>false</required>
            <type>java.io.Serializable</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[The key for looking up the text for the title-attribute. Although this
                attribute is not required you must provide either this or #titleValue if you want a
                title to be displayed.]]>
            </description>
            <name>titleKey</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[The Object displayed for the title-attribute. This is a replacement for
                #titleKey. If both are present titleValue takes precedence. This object is usually a
                String. If not, the developer must either register a corresponding converter for the
                class or implement the toString method accordingly.]]>
            </description>
            <name>titleValue</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[The optional converter to be used in case of titleValue is set and needs
                conversion.]]>
            </description>
            <name>titleConverter</name>
            <required>false</required>
            <type>javax.faces.convert.Converter</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[A defined icon class, defined within stylesheet, e.g. cui-icon-warning. In
                order to prevent improper usage the matching is restricted to the prefixes:
                "cui-icon, cui-mime-type, ui-icon-". If none of them is matched it will default to
                "cui-icon-circle_question_mark".]]>
            </description>
            <name>icon</name>
            <required>true</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Defines The alignment of the icon within a given component. In case it is
                not set or does not match one of "left" or "right" the resolveIconAlign() will
                return AlignHolder.DEFAULT, other wise it will return the according value. The
                default icon alignment is usually 'left']]>
            </description>
            <name>iconAlign</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
    </tag>
    <tag>
        <description>
            <![CDATA[
             <p>
                Enables a parent element like cui:button to control a ModalDialogComponent to show or hide.
                It acts as an AbstractParentDecorator saying it solely write Html-5 attributes to the parent components,
                the actual heavy-lifting is done by the javascript 'javascript.enabler/enabler.modal.js'
                 <cui:button labelValue="Open">
                   <cui:modalControl for="dialogId"/>
                 </cui:button>
                 <cui:modalDialog id="dialogId" headerValue="Dialog-Header">
                   Some Dialog Content
                 </cui:modalDialog>
            </p>
       ]]></description>
        <tag-name>modalControl</tag-name>
        <component>
            <component-type>com.icw.cui.bootstrap.modal_dialog_control</component-type>
        </component>
        <attribute>
            <description><![CDATA[Flag indicating whether or not this component should be rendered (during
                Render Response Phase), or processed on any subsequent form submit. The default
                value for this property is true.]]>
            </description>
            <name>rendered</name>
            <required>false</required>
            <type>boolean</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Defines the id of the modal to be opened. Is required. Results in a corresponding 'data-modal-for'-attribute.]]>
            </description>
            <name>for</name>
            <required>true</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Defines the javascript / dom event, the open call is attached to, defaults to 'click'.
                Results in a corresponding 'data-modal-event'-attribute.]]>
            </description>
            <name>event</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Defines the parameter to be passed to the modal() call. Supported values are 'show' and 'hide', defaults is 'show'. Results in a corresponding 'data-modal-action'-attribute]]>
            </description>
            <name>action</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
    </tag>
    <tag>
        <description><![CDATA[The inlineConfirm is an alternative to modal confirm dialogs.
        <p>In the basic variant it renders the content of the required &lt;facet name="initial"/&gt; as the content, usually a button
        and the renders the actual child if the content is clicked. In case you want to close / cancel the inline confirm you can add
        a corresponding button with 'data-inline-confirm-cancel', e.g. &lt;cui:button labelKey="common.button.cancel" pt:data-inline-confirm-cancel="cancel" /&gt;</p>]]>
        </description>
        <tag-name>inlineConfirm</tag-name>
        <component>
            <component-type>com.icw.cui.components.inline_confirm</component-type>
            <renderer-type>com.icw.cui.components.inline_confirm_renderer</renderer-type>
        </component>
    </tag>
    <tag>
        <description><![CDATA[
        <p>Renders a <a href="http://getbootstrap.com/javascript/#modals-examples&quot;">Bootstrap Modal Dialog</a>.</p>
        <p>Supported facets are header, and footer. In case of the header you can use headerKey / headerValue.
        The same for footerKey /footerValue as text content for footer.
        There are different general styles available (state): one of 'primary', 'success', 'info', 'warning', 'danger'.
        If none of those is set it uses 'default'. </p>
        <a href="https://cui-ux-trunk.ci.dev.icw.int:16000/cui-reference-documentation/faces/pages/documentation/cui_components/demo/dialog.jsf">Reference Documentation</a>
        <h3>Usage</h3>
        <h3>Using cui:modalControl</h3>
         <pre>
         &lt;cui:button labelValue="Open"&gt;
           &lt;cui:modalControl for="dialogId"/&gt;
         &lt;/cui:button&gt;
         &lt;cui:modalDialog id="dialogId" headerValue="Dialog-Header"&gt;
           Some Dialog Content
         &lt;/cui:modalDialog&gt;
         </pre>
        <h3>Using JavaScript</h3>
        <pre>
            &lt;cui:button state="primary" labelValue="Show Modal"
                onclick="$('[data-modal-dialog-id=dialogId]').modal('show');return false;" /&gt;
        </pre>
        ]]>
        </description>
        <tag-name>modalDialog</tag-name>
        <component>
            <component-type>com.icw.cui.bootstrap.modal_dialog</component-type>
            <renderer-type>com.icw.cui.bootstrap.modal_dialog_renderer</renderer-type>
        </component>
        <attribute>
            <description><![CDATA[The id is a required attribute. It must be unique within the page context. It is used to identify the component from the corresponding cui:modalControl.
            It is rendered as "data-modal-dialog-id" in order to select the element for the javascript call]]>
            </description>
            <name>id</name>
            <required>true</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description><![CDATA[Flag indicating whether or not this component should be rendered (during
                Render Response Phase), or processed on any subsequent form submit. The default
                value for this property is true.]]>
            </description>
            <name>rendered</name>
            <required>false</required>
            <type>boolean</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Different general styles available (state): one of 'primary', 'success',
                'info', 'warning', 'danger'. If none of those is set it uses 'default'. Attention :
                currently only experimental.]]>
            </description>
            <name>state</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description><![CDATA[Defines if the dialog is closable on click on overlay background or default close button.
            If value is set to false you need to provide a closing functionality by your own.
            Default value is 'true']]></description>
            <name>closable</name>
            <required>false</required>
            <type>java.lang.Boolean</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Space-separated list of CSS style class(es) to be applied additionally
                when this element is rendered.]]>
            </description>
            <name>styleClass</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[CSS style(s) to be applied when this component is rendered. Caution: The
                styleClass attribute is always to be preferred.]]>
            </description>
            <name>style</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[The key for looking up the text display as the header.]]>
            </description>
            <name>headerKey</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[The String displayed for the label. This is a replacement for #headerKey.
                If both are present headerValue takes precedence. If the type is not
                java.lang.String the developer must ensure that an according converter for the
                exists. If the header facet is available the facet takes precedence.]]>
            </description>
            <name>headerValue</name>
            <required>false</required>
            <type>java.io.Serializable</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[The key for looking up the text display as the footer.]]>
            </description>
            <name>footerKey</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[The String displayed for the label. This is a replacement for #footerKey.
                If both are present footerValue takes precedence. If the type is not
                java.lang.String the developer must ensure that an according converter for the
                exists. If the footer facet is available the facet takes precedence.]]>
            </description>
            <name>footerValue</name>
            <required>false</required>
            <type>java.io.Serializable</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Supported values are 'sm', 'lg', 'fluid' based on bootstrap screen sizes.
                'fluid' uses max width of screen. As default no size setting is set.]]>
            </description>
            <name>size</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Optional attribute to control the appearing of the dialog: currently supported is 'fade']]>
            </description>
            <name>animation</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
    </tag>
    <tag>
        <description><![CDATA[Trigger update of specified components when the browser window was
            resized.]]></description>
        <tag-name>updateOnResize</tag-name>
        <component>
            <component-type>com.icw.cui.components.updateOnResize</component-type>
            <renderer-type>com.icw.cui.components.updateOnResize_renderer</renderer-type>
        </component>
        <attribute>
            <description><![CDATA[Comma separated list of component ids to be updated.]]>
            </description>
            <name>update</name>
            <required>true</required>
            <type>java.lang.String</type>
        </attribute>
    </tag>
    <tag>
        <description>
            <![CDATA[Register a DateTimeConverter instance on the UIComponent associated with the
            closest parent UIComponent custom action.]]>
        </description>
        <tag-name>convertDateTime</tag-name>
        <converter>
            <converter-id>de.cuioss.jsf.components.converter.DateTimeConverter</converter-id>
        </converter>
        <attribute>
            <description>
                <![CDATA[Predefined formatting style which determines how the date component of a
                date string is to be formatted and parsed. Applied only if type is "date" or "both".
                Valid values are "default", "short", "medium", "long", and "full". Default value is
                "default".]]>
            </description>
            <name>dateStyle</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Locale whose predefined styles for dates and times are used during
                formatting or parsing. If not specified, the Locale returned by
                FacesContext.getViewRoot().getLocale() will be used. Value must be either a VB
                expression that evaluates to a java.util.Locale instance, or a String that is valid
                to pass as the first argument to the constructor java.util.Locale(String language,
                String country). The empty string is passed as the second argument.]]>
            </description>
            <name>locale</name>
            <required>false</required>
            <type>java.lang.Object</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Custom formatting pattern which determines how the date/time string should
                be formatted and parsed.]]>
            </description>
            <name>pattern</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Predefined formatting style which determines how the time component of a
                date string is to be formatted and parsed. Applied only if type is "time" or "both".
                Valid values are "default", "short", "medium", "long", and "full". Default value is
                "default".]]>
            </description>
            <name>timeStyle</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Time zone in which to interpret any time information in the date String.
                Value must be either a VB expression that evaluates to a java.util.TimeZone
                instance, or a String that is a timezone ID as described in the javadocs for
                java.util.TimeZone.getTimeZone().]]>
            </description>
            <name>timeZone</name>
            <type>java.lang.Object</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Specifies what contents the string value will be formatted to include, or
                parsed expecting. Valid values are "date", "time", and "both". Default value is
                "date"]]>.
            </description>
            <name>type</name>
            <type>java.lang.String</type>
        </attribute>
    </tag>
    <tag>
        <description>
            <![CDATA[String to List conversion and vice versa, based on the separator character.]]>
        </description>
        <tag-name>stringToListConverter</tag-name>
        <converter>
            <converter-id>cui.StringToListConverter</converter-id>
        </converter>
        <attribute>
            <description>
                <![CDATA[The separator character. If not specified, the default is ";"]]>
            </description>
            <name>separator</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Depending on the usecase for this converter there are different target
                types that should be supported: List and SortedSet. This attribute controls the
                behavior. In case it is "sorted_set" the resulting collection will be a SortedSet
                ina all other cases it will be List]]>
            </description>
            <name>targetType</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[If true, doesn't add empty strings to the result list.]]>
            </description>
            <name>omitEmptyStrings</name>
            <required>false</required>
            <type>java.lang.Boolean</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[If true, trims the resulting strings.]]>
            </description>
            <name>trimResults</name>
            <required>false</required>
            <type>java.lang.Boolean</type>
        </attribute>
    </tag>
    <tag>
        <description>
            <![CDATA[Display a list of CodeTypes.]]>
        </description>
        <tag-name>listOfCodeTypesConverter</tag-name>
        <converter>
            <converter-id>cui.CodeTypeListDisplayConverter</converter-id>
        </converter>
        <attribute>
            <description>
                <![CDATA[The separator character. If not specified, the default is ";"]]>
            </description>
            <name>separator</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
    </tag>
    <tag>
        <description>
            <![CDATA[
             <p>
                Renders a <a href="http://getbootstrap.com/components/#alerts">bootstrap alert</a>.  More information and
               examples can be found in the <a href="https://cui-ux-trunk.ci.dev.icw.int:16000/cui-reference-documentation/faces/pages/documentation/cui_components/demo/miscellaneous.jsf" >Reference Documentation</a></p>
       ]]>
        </description>
        <tag-name>notificationBox</tag-name>
        <component>
            <component-type>com.icw.cui.bootstrap.notificationbox</component-type>
            <handler-class>de.cuioss.jsf.bootstrap.notification.NotificationBoxHandler</handler-class>
            <renderer-type>com.icw.cui.bootstrap.notificationbox_renderer</renderer-type>
        </component>
        <attribute>
            <description><![CDATA[The component identifier for this component. This value must be unique
                within the closest parent component that is a naming container.]]>
            </description>
            <name>id</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description><![CDATA[Flag indicating whether or not this component should be rendered (during
                Render Response Phase), or processed on any subsequent form submit. The default
                value for this property is true.]]>
            </description>
            <name>rendered</name>
            <required>false</required>
            <type>boolean</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Space-separated list of CSS style class(es) to be applied additionally
                when this element is rendered.]]>
            </description>
            <name>styleClass</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[CSS style(s) to be applied when this component is rendered. Caution: The
                styleClass attribute is always to be preferred.]]>
            </description>
            <name>style</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Different general styles available (state): one of 'success', 'info',
                'warning', 'danger'.]]>
            </description>
            <name>state</name>
            <required>true</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[The key for looking up the text to be rendered. Although this attribute is
                not required you must provide either this or #contentValue if you want the text
                content to be displayed.]]>
            </description>
            <name>contentKey</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[The object to be rendered as text-content. This is a replacement for
                #contentKey. If both are present contentValue takes precedence.]]>
            </description>
            <name>contentValue</name>
            <required>false</required>
            <type>java.io.Serializable</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[The optional converter to be used in case of contentValue is set and needs
                conversion]]>
            </description>
            <name>contentConverter</name>
            <required>false</required>
            <type>javax.faces.convert.Converter</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Indicates whether the content is to be escaped on output or not. Default
                is true.]]>
            </description>
            <name>contentEscape</name>
            <required>false</required>
            <type>boolean</type>
        </attribute>
        <attribute>
            <description><![CDATA[Indicates whether the component can be dismissed.]]>
            </description>
            <name>dismissible</name>
            <required>false</required>
            <type>boolean</type>
        </attribute>
        <attribute>
            <description><![CDATA[Method expression to listen to dismiss events.
                       The listener must be in the form of
                       <pre>public void methodName(de.cuioss.jsf.api.components.events.ModelPayloadEvent dismissEvent)</pre>]]>
            </description>
            <name>dismissListener</name>
            <required>false</required>
            <type>javax.el.MethodExpression</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[The key for looking up the text to be rendered as title-attribute for the
                dismiss button. If #dismissible is not true, it will be ignored. Although this
                attribute is not required you must provide either this or #closeButtonTitleValue if
                you want a title to be rendered.]]>
            </description>
            <name>closeButtonTitleKey</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[The object to be rendered as title-attribute for the wrapped input
                component. This is a replacement for #closeButtonTitleKey. If both are present
                closeButtonTitleValue takes precedence.]]>
            </description>
            <name>closeButtonTitleValue</name>
            <required>false</required>
            <type>java.io.Serializable</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[The optional converter to be used in case of closeButtonTitleValue is set
                and needs conversion.]]>
            </description>
            <name>closeButtonTitleConverter</name>
            <required>false</required>
            <type>javax.faces.convert.Converter</type>
        </attribute>
    </tag>
    <tag>
        <description><![CDATA[
    <h2>Overview</h2>
    <p>Renders a Label and message for the given output or input component (only use HtmlInputText, HtmlSelectBooleanCheckbox or HtmlSelectManyCheckbox).</p>
    <p>The component will be rendered into a bootstrap defined div with class='control-group'.
    The input component is to be a child for this component and having the id 'input'
    As an alternative to 'input' you can change the attribute 'forIdentifier'
    In special cases you can provides a space separated list for the forIdentifier attribute
    resulting in n message elements being appended.</p>
    <p>The component itself will apply the (needed) styleClass "form-control" to the
    given input if the corresponding component does not have a styleClass set already. If it has a styleClass
    the implementer must ensure that it has a form-control specific styleClass set.</p><p>
    To display additional elements a 'prepend' and 'append' facet can be added. This triggers rendering the input
    element into a 'input-group'.</p><p> More information and
    examples can be found in the <a href="https://cui-ux-trunk.ci.dev.icw.int:16000/cui-reference-documentation/faces/pages/documentation/cui_components/demo/labeledContainerDemo.jsf" >Reference Documentation</a>
    </p>]]></description>
        <tag-name>labeledContainer</tag-name>
        <component>
            <component-type>com.icw.cui.bootstrap.labeledContainer</component-type>
            <renderer-type>com.icw.cui.bootstrap.labeledContainer_renderer</renderer-type>
        </component>
        <attribute>
            <description><![CDATA[The component identifier for this component. This value must be unique
                within the closest parent component that is a naming container.]]>
            </description>
            <name>id</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description><![CDATA[Flag indicating whether or not this component should be rendered (during
                Render Response Phase), or processed on any subsequent form submit. The default
                value for this property is true.]]>
            </description>
            <name>rendered</name>
            <required>false</required>
            <type>boolean</type>
        </attribute>
        <attribute>
            <description><![CDATA[Flag indicating whether or not this component should disable the
            contained input component. The default value for this property is false.]]>
            </description>
            <name>disabled</name>
            <required>false</required>
            <type>boolean</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Space-separated list of CSS style class(es) to be applied additionally
                when this element is rendered.]]>
            </description>
            <name>styleClass</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[CSS style(s) to be applied when this component is rendered. Caution: The
                styleClass attribute is always to be preferred.]]>
            </description>
            <name>style</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Class to be wrapped around the form-group on error, defaults to
                'has-error'. ]]></description>
            <name>errorClass</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[The key for looking up the text display as the label. Although this
                attribute is not required the developer must provide either this or #labelValue if
                you want a label to be displayed. Will not be used if a "label" facet exists.]]>
            </description>
            <name>labelKey</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[The String displayed for the label. This is a replacement for #labelKey.
                If both are present labelValue takes precedence. If the type is not java.lang.String
                the developer must ensure that an according converter for the exists.
                Will not be used if a "label" facet exists.]]>
            </description>
            <name>labelValue</name>
            <required>false</required>
            <type>java.io.Serializable</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[The optional converter to be used in case of labelValue is set and needs
                conversion. Will not be used if a "label" facet exists.]]>
            </description>
            <name>labelConverter</name>
            <required>false</required>
            <type>javax.faces.convert.Converter</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Indicates whether the label is to be escaped on output or not. Default is
                true. Will not be used if a "label" facet exists.]]>
            </description>
            <name>labelEscape</name>
            <required>false</required>
            <type>boolean</type>
        </attribute>
        <attribute>
            <description><![CDATA[Indicates whether to render the message element or not. Defaults to true.]]>
            </description>
            <name>renderMessage</name>
            <required>false</required>
            <type>boolean</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Indicates whether the 'prepend' facet is to be treated as button, defaults
                to false. If it is true the facet will be rendered with the styleClass =
                'input-group-btn', 'input-group-addon' otherwise.]]>
            </description>
            <name>prependAsButton</name>
            <required>false</required>
            <type>boolean</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Indicates whether the 'append' facet is to be treated as button, defaults
                to false. If it is true the facet will be rendered with the styleClass =
                'input-group-btn', 'input-group-addon' otherwise.]]>
            </description>
            <name>appendAsButton</name>
            <required>false</required>
            <type>boolean</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[The id of the child input component. Defaults to 'input'. Usually to be
                kept the same. In special cases you can provides a space separated list for the
                forIdentifier attribute resulting in n message elements being appended.]]>
            </description>
            <name>forIdentifier</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[The key for looking up the text display as the placeholder.]]>
            </description>
            <name>placeholderKey</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[The String displayed for the placeholder. This is a replacement for
                #placeholderKey. If both are present placeholderValue takes precedence. If the type
                is not java.lang.String the developer must ensure that an according converter for
                the exists]]>.
            </description>
            <name>placeholderValue</name>
            <required>false</required>
            <type>java.io.Serializable</type>
        </attribute>
        <attribute>
            <description><![CDATA[The optional converter to be used in case of placeholderValue is set and
                needs conversion. The converter attribute sets the converter instance to be
                registered for this component. It must match the converter-id value of a converter
                element defined in your Faces configuration file.]]></description>
            <name>placeholderConverter</name>
            <required>false</required>
            <type>javax.faces.convert.Converter</type>
        </attribute>
        <attribute>
            <description><![CDATA[Defines how the layout will be rendered. Layout mode 'column' renders
                component as form-group with column structure. Layout mode 'formgroup' renders
                component as form-group without column structure. Layout mode 'label_sr_only'
                renders a form-group structure with label style class 'sr-only' which will display
                it only for screen readers but will hide it for standard browsers. Mode 'plain'
                ignore columns size settings. Allowed are 'plain', 'formgroup', 'label_sr_only' and
                'column'. Default is currently 'column']]></description>
            <name>layoutMode</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description><![CDATA[The size of the label-column. Must be between 1-12. Defaults to 4. Only
                used in case layoutMode is set to 'column' (default)]]></description>
            <name>labelSize</name>
            <required>false</required>
            <type>java.lang.Integer</type>
        </attribute>
        <attribute>
            <description><![CDATA[Additional styleClass attributes for the label column.]]></description>
            <name>labelStyleClass</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description><![CDATA[The size of the content-column. Must be between 1-12. Defaults to 8. Only
                used in case layoutMode is set to 'column' (default)]]></description>
            <name>contentSize</name>
            <required>false</required>
            <type>java.lang.Integer</type>
        </attribute>
        <attribute>
            <description><![CDATA[Additional styleClass attributes for the content column.]]></description>
            <name>contentStyleClass</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[The key for looking up the text to be rendered as title-attribute for the
                wrapped input component. Although this attribute is not required you must provide
                either this or #titleValue if you want a title to be rendered.]]>
            </description>
            <name>titleKey</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[The object to be rendered as title-attribute for the wrapped input
                component. This is a replacement for #titleKey. If both are present titleValue takes
                precedence.]]>
            </description>
            <name>titleValue</name>
            <required>false</required>
            <type>java.io.Serializable</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[The optional converter to be used in case of titleValue is set and needs
                conversion.]]>
            </description>
            <name>titleConverter</name>
            <required>false</required>
            <type>javax.faces.convert.Converter</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[The key for looking up the text to be rendered as static content. Although
                this attribute is not required you must provide either this or #contentValue if you
                want the text content to be displayed.]]>
            </description>
            <name>contentKey</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[The object to be rendered as static text content. This is a replacement
                for #contentKey. If both are present contentValue takes precedence.]]>
            </description>
            <name>contentValue</name>
            <required>false</required>
            <type>java.io.Serializable</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[The optional converter to be used in case of contentValue is set and needs
                conversion]]>
            </description>
            <name>contentConverter</name>
            <required>false</required>
            <type>javax.faces.convert.Converter</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Indicates whether the content is to be escaped on output or not. Default
                is true.]]>
            </description>
            <name>contentEscape</name>
            <required>false</required>
            <type>boolean</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Indicates whether the content should be treated as a complex output structure (consisting of div elements e.g.). Default
                is false.]]>
            </description>
            <name>renderComplexOutput</name>
            <required>false</required>
            <type>boolean</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Indicates whether the content should be rendered inside a div with style class "input-group".
                Necessary when "input-group-addon" elements will be used, that can not be put as an prepend or append facet.
                Default is false.]]>
            </description>
            <name>renderInputGroup</name>
            <required>false</required>
            <type>boolean</type>
        </attribute>
    </tag>
    <tag>
        <description><![CDATA[Helper / Decorator component used for guarding input-elements within LabeledContainerComponent. This is a replacement for the cui:unlockableField
        Renders an unlock button beside its input component. The input component will be disabled / guarded per default. It can be unlocked upon demand. A warning message is shown right beside if it is unlocked
        There are two logical states defined: 'guarded' and 'resetGuard': the guarded-state is represented by the 'guardButton', the resetGuard-state is represented by the 'resetGuardButton'
        ]]>
        </description>
        <tag-name>inputGuard</tag-name>
        <component>
            <component-type>com.icw.cui.bootstrap.guarded_input</component-type>
            <renderer-type>javax.faces.Hidden</renderer-type>
        </component>
        <attribute>
            <description><![CDATA[Flag indicating whether or not this component should be rendered (during
                Render Response Phase), or processed on any subsequent form submit. The default
                value for this property is true.]]>
            </description>
            <name>rendered</name>
            <required>false</required>
            <type>boolean</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Evaluates to Collection<String>.
                It is a space separated list of search expressions to components that will participate in the "render" portion of the Request Processing Lifecycle.
                Defines which components to be updated. It behaves like the 'render' attribute on f:ajax regarding resolution of the component ids.
                Defaults to '@namingcontainer' resulting in the LabeledContainer to be updated ]]>
            </description>
            <name>update</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Evaluates to Collection<String>.
                It is a space separated list of search expressions to components that will participate in the "execute" portion of the Request Processing Lifecycle.
                Defines which components to be executed. It behaves like the 'execute' attribute on f:ajax regarding resolution of the component ids.
                Defaults to '@this' ]]>
            </description>
            <name>process</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[The alignment of the button relative to the wrapped input, defaults to 'append'. Allowed values are 'append' and 'prepend']]>
            </description>
            <name>buttonAlign</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[If set to true, default, the guard/resetGuard buttons are rendered, if set to false they are not rendered.]]>
            </description>
            <name>renderButtons</name>
            <required>false</required>
            <type>boolean</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[The icon to be displayed on the button removing the guard and making it editable, defaults to 'cui-icon-unlock' ]]>
            </description>
            <name>guardIcon</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[The key for looking up the text to be displayed as the title.
                Although this attribute is not required the developer must provide either this or #guardButtonTitleValue
                if you want a title to be displayed.
                Defaults to 'input_guard.unlock.default.title', resulting in 'Unlock field for editing' ]]>
            </description>
            <name>guardButtonTitleKey</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[The Object representing the title to be displayed. This is a replacement for #guardButtonTitleKey. If both are present guardButtonTitleValue takes precedence. ]]>
            </description>
            <name>guardButtonTitleValue</name>
            <required>false</required>
            <type>java.io.Serializable</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[The optional converterId to be used in case of guardButtonTitleValue is set and needs conversion.]]>
            </description>
            <name>guardButtonTitleConverter</name>
            <required>false</required>
            <type>javax.faces.convert.Converter</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Indicates whether the title is to be escaped on output or not. Default is true.]]>
            </description>
            <name>guardButtonTitleEscape</name>
            <required>false</required>
            <type>boolean</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[The icon to be displayed on the button resetting the guard and making it editable,
                defaults to 'cui-icon-restart'.]]>
            </description>
            <name>resetGuardIcon</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[The key for looking up the text to be displayed as the title.
                Although this attribute is not required the developer must provide either this or
                #resetResetGuardButtonTitleValue if you want a title to be displayed.
                Defaults to 'input_guard.lock.default.title', resulting in 'Revert changes']]>
            </description>
            <name>resetGuardButtonTitleKey</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[The Object representing the title to be displayed. This is a replacement for #resetResetGuardButtonTitleKey. If both are present resetResetGuardButtonTitleValue takes precedence.]]>
            </description>
            <name>resetGuardButtonTitleValue</name>
            <required>false</required>
            <type>java.io.Serializable</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[The optional converterId to be used in case of resetResetGuardButtonTitleValue is set and needs conversion.]]>
            </description>
            <name>resetGuardButtonTitleConverter</name>
            <required>false</required>
            <type>javax.faces.convert.Converter</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Indicates whether the title is to be escaped on output or not. Default is true.]]>
            </description>
            <name>resetGuardButtonTitleEscape</name>
            <required>false</required>
            <type>boolean</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[ If set to true, default, the clicking of the resetGuardButton will result in a
                EditableValueHolder#resetValue() on the guarded component. Default value is 'true']]>
            </description>
            <name>resetInputValue</name>
            <required>false</required>
            <type>boolean</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[The current value of this component. If it is not set it default to 'true' meaning guarded / locked.]]>
            </description>
            <name>value</name>
            <required>false</required>
            <type>java.lang.Boolean</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[<p>
                    MethodExpression representing a value change listener method
                    that will be notified when a new value has been set for this
                    input component. The expression must evaluate to a public
                    method that takes a <code>ValueChangeEvent</code>
                    parameter, with a return type of void, or to a public method
                    that takes no arguments with a return type
                    of void. In the latter case, the method has no way of easily
                    knowing what the new value is, but this can be useful in cases
                    where a notification is needed that "this value
                    changed".</p>]]>
            </description>
            <name>valueChangeListener</name>
            <required>false</required>
            <method-signature>void valueChange(javax.faces.event.ValueChangeEvent)
            </method-signature>
        </attribute>
        <attribute>
            <description>
                <![CDATA[The key for looking up the help / warning-text. Although this
                    attribute is not required the developer must provide either this or #helpTextValue if
                    you want a help / warning-text to be displayed.]]>
            </description>
            <name>helpTextKey</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[The String displayed for the help / warning-text. This is a replacement for #helpTextKey.
                    If both are present helpTextValue takes precedence. If the type is not java.lang.String
                    the developer must ensure that an according converter for the exists.]]>
            </description>
            <name>helpTextValue</name>
            <required>false</required>
            <type>java.io.Serializable</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[The optional converter to be used in case of helpTextValue is set and needs
                    conversion.]]>
            </description>
            <name>helpTextConverter</name>
            <required>false</required>
            <type>javax.faces.convert.Converter</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Indicates whether the help / warning-text is to be escaped on output or not. Default is
                    true.]]>
            </description>
            <name>helpTextEscape</name>
            <required>false</required>
            <type>boolean</type>
        </attribute>
    </tag>
    <tag>
        <description><![CDATA[
        Renders a bootstrap conform accordion.
        More information and examples can be found in the <a href="https://cui-ux-trunk.ci.dev.icw.int:16000/cui-reference-documentation/faces/pages/documentation/cui_components/demo/panel.jsf" >Reference Documentation</a></p>
        ]]>
        </description>
        <tag-name>accordion</tag-name>
        <component>
            <component-type>com.icw.cui.bootstrap.accordion</component-type>
            <renderer-type>com.icw.cui.bootstrap.accordion_renderer</renderer-type>
        </component>
        <attribute>
            <description><![CDATA[The component identifier for this component. This value must be unique
                within the closest parent component that is a naming container. Caution: The
                component itself is not a naming container]]>
            </description>
            <name>id</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description><![CDATA[Flag indicating whether or not this component should be rendered (during
                Render Response Phase), or processed on any subsequent form submit. The default
                value for this property is true.]]>
            </description>
            <name>rendered</name>
            <required>false</required>
            <type>boolean</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Space-separated list of CSS style class(es) to be applied additionally
                when this element is rendered.]]>
            </description>
            <name>styleClass</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description><![CDATA[CSS style(s) to be applied when this component is rendered. Caution: The
                styleClass attribute is always to be preferred.]]>
            </description>
            <name>style</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[If true, accordion items can be toggle independently from each other, i.e.
                more than one can be open at the same time.]]>
            </description>
            <name>multiselectable</name>
            <required>false</required>
            <type>boolean</type>
        </attribute>
        <attribute>
            <description><![CDATA[An instance of ActiveIndexManager is expected. Enables toggling of
                accordion panels. Numbering starts from 0.]]></description>
            <name>activeIndexManager</name>
            <required>false</required>
            <type>de.cuioss.jsf.api.components.support.ActiveIndexManager</type>
        </attribute>
    </tag>
    <tag>
        <description><![CDATA[
          <h2>Creates a bootstrap based collapsible panel.</h2>
          <p>
            For header or footer labeling there are the following attributes: headerKey, headerValue, footerKey, footerValue.
            Alternatively a header or footer facet can be used which takes precedence over the coresponding key/value attributes.
            There are also different general styles available (state): one of 'primary', 'success', 'info', 'warning', 'danger'. If none of those is set 'default' is used.
            Caution: If you want to make it collapsible and use it within ui:repeat you must set a ValueExpression for the collapsed flag or the collapseSwitch and store the
            state within a given bean, because ui:repeat removes the state for the components.
          </p>
          <p>
            More information and examples can be found in the <a href="https://cui-ux-trunk.ci.dev.icw.int:16000/cui-reference-documentation/faces/pages/documentation/cui_components/demo/panel.jsf" >Reference Documentation</a></p>
          </p>
            ]]>
        </description>
        <tag-name>panel</tag-name>
        <component>
            <component-type>com.icw.cui.bootstrap.panel</component-type>
            <renderer-type>com.icw.cui.bootstrap.panel_renderer</renderer-type>
        </component>
        <attribute>
            <description>
                <![CDATA[The component identifier for this component. This value must be unique
                within the closest parent component that is a naming container.]]>
            </description>
            <name>id</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Flag indicating whether or not this component should be rendered (during
                Render Response Phase), or processed on any subsequent form submit. The default
                value for this property is true.]]>
            </description>
            <name>rendered</name>
            <required>false</required>
            <type>boolean</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Different general styles available (state): one of 'primary', 'success',
                'info', 'warning', 'danger', 'light'. If none of those is set it uses 'default'. ]]></description>
            <name>state</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description><![CDATA[CSS style(s) to be applied when this component is rendered. Caution: The
                styleClass attribute is always to be preferred.]]>
            </description>
            <name>style</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Space-separated list of CSS style class(es) to be applied additionally
                when this element is rendered.]]>
            </description>
            <name>styleClass</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <!-- HEADER -->
        <attribute>
            <description>
                <![CDATA[The key for looking up the text display as the header.]]>
            </description>
            <name>headerKey</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[The String displayed in the header. This is a replacement for #headerKey.
                If both are present headerValue takes precedence. If the type is not
                java.lang.String the developer must ensure that an according converter exists. If a
                header facet is available the facet takes precedence. ]]></description>
            <name>headerValue</name>
            <required>false</required>
            <type>java.io.Serializable</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Defines the HTML tag to be used for the header title. Defaults to 'h4'.]]>
            </description>
            <name>headerTag</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <!-- FOOTER -->
        <attribute>
            <description>
                <![CDATA[The key for looking up the text to display in the footer.]]>
            </description>
            <name>footerKey</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[The String displayed in the. This is a replacement for #footerKey. If both
                are present footerValue takes precedence. If the type is not java.lang.String the
                developer must ensure that an according converter exists. If a footer facet is
                available the facet takes precedence.]]>
            </description>
            <name>footerValue</name>
            <required>false</required>
            <type>java.io.Serializable</type>
        </attribute>
        <!-- COMPONENT SPECIFIC -->
        <attribute>
            <description><![CDATA[Flag indicating whether the component is collapsed initially. Defaults to
                false.]]></description>
            <name>collapsed</name>
            <required>false</required>
            <type>boolean</type>
        </attribute>
        <attribute>
            <description><![CDATA[Flag indicating whether the component should be collapsible. Defaults to
                true.]]></description>
            <name>collapsible</name>
            <required>false</required>
            <type>boolean</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[The collapsed state as modifiable object. If it is set it takes precedence
                over collapsed. Caution: Only used if collapsible=true]]>
            </description>
            <name>collapseSwitch</name>
            <required>false</required>
            <type>de.cuioss.jsf.api.ui.model.ToggleSwitch</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[If true, the panels content will be loaded for the first time when it is
                going to be opened. If enabled the component must be in a form tag. Defaults to
                false.]]>
            </description>
            <name>deferred</name>
            <required>false</required>
            <type>boolean</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[<p>Allows to set the children loaded state for a deferred panel to override the internal component
                behavior. If set to false and an expanded deferred panel shall be rendered, a waiting indicator will be
                rendered and an ajax update request will be started to retrieve and render the children.
                If set to true the children will be retrieved and rendered directly.</p>
                <p>Use case: Via ajax update the content of the panel is changed and the panel may need to reload the
                content and display a waiting indicator at this time.</p>
                <p>Will be set to true by the component to trigger loading of the children.</p>
                <p>If not set the component be store the state internal during view scope.]]>
            </description>
            <name>childrenLoaded</name>
            <required>false</required>
            <type>boolean</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Flag indicating whether the component should automatically update its
                server-side model upon expand/collapse event instead of waiting for a form submit.
                If enabled the component must be in a form tag. Defaults to false.]]>
            </description>
            <name>asyncUpdate</name>
            <required>false</required>
            <type>boolean</type>
        </attribute>
    </tag>
    <tag>
        <description>
            <![CDATA[
             <p>
			 Renders a bootstrap based tooltip component for an existing parent-component. It acts as a decorator, saying
			 itself it renders no output but changes the attributes of the parent element accordingly.
			 The actual rendering of the tooltip is done by the javascript "component.enabler.tooltip.js", see  <a href="http://getbootstrap.com/javascript/#tooltips">bootstrap tooltip</a>
			   More information and examples can be found in the
			   <a href="https://cui-ux-trunk.ci.dev.icw.int:16000/cui-reference-documentation/faces/pages/documentation/cui_components/demo/miscellaneous.jsf" >Reference Documentation</a></p>
       ]]></description>
        <tag-name>tooltip</tag-name>
        <component>
            <component-type>com.icw.cui.bootstrap.tooltip</component-type>
        </component>
        <attribute>
            <description><![CDATA[Flag indicating whether or not this component should be rendered (during
                Render Response Phase), or processed on any subsequent form submit. The default
                value for this property is true.]]>
            </description>
            <name>rendered</name>
            <required>false</required>
            <type>boolean</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[The key for looking up the text to be rendered. If neither contentKey nor
                contentValue is set they title of the parent component will be implicitly used.]]>
            </description>
            <name>contentKey</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[The object to be rendered as text-content. This is a replacement for
                #contentKey. If both are present contentValue takes precedence. If neither
                contentKey nor contentValue is set they title of the parent component will be
                implicitly used.]]>
            </description>
            <name>contentValue</name>
            <required>false</required>
            <type>java.io.Serializable</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[The optional converter to be used in case of contentValue is set and needs
                conversion]]>
            </description>
            <name>contentConverter</name>
            <required>false</required>
            <type>javax.faces.convert.Converter</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Indicates whether the content is to be escaped on output or not. Default
                is true.]]>
            </description>
            <name>contentEscape</name>
            <required>false</required>
            <type>boolean</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[String identifying the relative positioning of the tooltip: One of 'left',
                'top', 'bottom', 'right' expected, defaults to "auto right" For example, if
                placement is "auto left", the tooltip will display to the left when possible,
                otherwise it will display right.]]>
            </description>
            <name>placement</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[String identifying the dom-event when to trigger the display of the
                tooltip. One of 'click', 'hover', 'focus', 'manual' expected, defaults to "hover
                focus".]]>
            </description>
            <name>trigger</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Allow to define different delay of showing and hiding the tooltip (ms).
                Default value is 500 (ms)]]>
            </description>
            <name>delay</name>
            <required>false</required>
            <type>java.lang.Integer</type>
        </attribute>
    </tag>
    <!-- Curated Bootstrap Components -->
    <tag>
        <description>
            <![CDATA[
             <p>
               Renders a bootstrap conform div with the styleClass 'col-sm-' size, resulting in a column.
            </p>
            <p>
                The layout relies completely on the grid-system of twitter-bootstrap,
                see <a href="http://getbootstrap.com/css/#grid">Bootstrap Documentation</a>
            </p>
            <ul>
                <li>Columns must always reside within a row as a direct child.</li>
                <li>The size and offset of a column is always defined in 1/12
                    steps. A row is limited to 12. If the columnSize (and offsets) are
                    more than 12 the surplus columns will be rendered in the next line.</li>
                <li>Offsets are a convenient way to define a gap between two
                    columns</li>
                <li>The size definitions of the components are always related to
                    md. In case you want to change the behavior you need to add
                    additional styleClasses, see example.</li>
            </ul>
             <p>
               More information and
               examples can be found in the <a href="https://cui-ux-trunk.ci.dev.icw.int:16000/cui-reference-documentation/faces/pages/documentation/cui_components/demo/layout.jsf" >Reference Documentation</a></p>
            <h3>Usage</h3>
                <pre>
&lt;cui:row&gt;
        &lt;cui:column size="4"&gt;
            &lt;span&gt;Size="4"&lt;/span&gt;
        &lt;/cui:column&gt;
        &lt;cui:column size="2" &gt;
            &lt;span&gt;Size="2"&lt;/span&gt;
        &lt;/cui:column&gt;
        &lt;cui:column size="4" offsetSize="2"&gt;
            &lt;span&gt;Size="3", Offset="4"&lt;/span&gt;
        &lt;/cui:column&gt;
&lt;/cui:row&gt;</pre>
             <h3>Styling</h3>
                 <ul>
                     <li>The marker css class is 'col-sm-' + size attribute</li>
                     <li>The offset css class is 'col-sm-offset-' + offsetSize attribute</li>
                 </ul>
       ]]>
        </description>
        <tag-name>column</tag-name>
        <component>
            <component-type>com.icw.cui.bootstrap.column</component-type>
            <renderer-type>com.icw.cui.bootstrap.layout_renderer</renderer-type>
        </component>
        <attribute>
            <description><![CDATA[The component identifier for this component.  This value must be
                unique within the closest parent component that is a naming
                container. Caution: The component itself is not a naming container]]>
            </description>
            <name>id</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description><![CDATA[Flag indicating whether or not this component should be rendered
                (during Render Response Phase), or processed on any subsequent
                form submit.  The default value for this property is true.]]>
            </description>
            <name>rendered</name>
            <required>false</required>
            <type>boolean</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Space-separated list of CSS style class(es) to be applied additionally when
                this element is rendered.]]>
            </description>
            <name>styleClass</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description><![CDATA[The size of the appropriate column. Must be between 1-12]]></description>
            <name>size</name>
            <required>true</required>
            <type>java.lang.Integer</type>
        </attribute>
        <attribute>
            <description><![CDATA[The offset-size of the appropriate column. Must be between 1-12]]></description>
            <name>offsetSize</name>
            <required>false</required>
            <type>java.lang.Integer</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[CSS style(s) to be applied when this component is rendered.
               Caution: The styleClass attribute is always to be preferred.]]>
            </description>
            <name>style</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
    </tag>
    <tag>
        <description>
            <![CDATA[
             <p>
               Renders a bootstrap conform div with the styleClass 'form-group' and an embedded column.
               It is used to place buttons within a form context.
            </p>
            <p>
            The layout relies completely on the grid-system of twitter-bootstrap,
            see <a href="http://getbootstrap.com/css/#grid">Bootstrap Documentation</a>
            </p>
            <ul>
                <li>controlGoups must be within container with 'form-horizontal'.</li>
                <li>They act similar to formGroups or labeledContainer.</li>
                <li>The size and offset of a controlGoup is always defined in 1/12
                    steps. A row is limited to 12. If the columnSize (and offsets) are
                    more than 12 the surplus columns will be rendered in the next line.</li>
                <li> The offset is used for the inner spacing of the column</li>
                <li>The size definitions of the components are always related to
                    md. In case you want to change the behavior you need to add
                    additional styleClasses, see example.</li>
            </ul>
            <p>
               More information and
               examples can be found in the <a href="https://cui-ux-trunk.ci.dev.icw.int:16000/cui-reference-documentation/faces/pages/documentation/cui_components/demo/layout.jsf" >Reference Documentation</a></p>
             <h3>Styling</h3>
             <ul>
                <li>The marker css class is 'form-group' and 'col-md-' + size attribute</li>
                <li>The offset css class is 'col-md-offset-' + offsetSize attribute</li>
             </ul>
             ]]>
        </description>
        <tag-name>controlGroup</tag-name>
        <component>
            <component-type>com.icw.cui.bootstrap.controlgroup</component-type>
            <renderer-type>com.icw.cui.bootstrap.controlgroup_renderer</renderer-type>
        </component>
        <attribute>
            <description>
                <![CDATA[The component identifier for this component.  This value must be
                    unique within the closest parent component that is a naming
                    container. Caution: The component itself is not a naming container]]>
            </description>
            <name>id</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Flag indicating whether or not this component should be rendered
                    (during Render Response Phase), or processed on any subsequent
                    form submit.  The default value for this property is true.]]>
            </description>
            <name>rendered</name>
            <required>false</required>
            <type>boolean</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Space-separated list of CSS style class(es) to be applied additionally to the surrounding form-group when
                    this element is rendered.]]>
            </description>
            <name>styleClass</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[CSS style(s) to be applied when this component is rendered.
                   Caution: The styleClass attribute is always to be preferred.]]>
            </description>
            <name>style</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description><![CDATA[The size of the column. Must be between 1-12.The default size is '8']]></description>
            <name>size</name>
            <required>false</required>
            <type>java.lang.Integer</type>
        </attribute>
        <attribute>
            <description><![CDATA[The offset of the column. Must be between 1-12.]]></description>
            <name>offsetSize</name>
            <required>false</required>
            <type>java.lang.Integer</type>
        </attribute>
    </tag>
    <tag>
        <description>
            <![CDATA[
           <p>
            Renders an Icon according to the cui-icon contract. The icon is rendered as a span with the according classes.
               The title is resolved using the cui standard label-resolving mechanism.</p>
            <p>A list of all available icons can be found at the <a href="https://cui-ux-trunk.ci.dev.icw.int:16000/cui-reference-documentation/faces/pages/documentation/icons/cui_icons.jsf">Reference Documentation</a> </p>
            <h3>Usage</h3>
                <table>
                    <tr>
                        <td><pre>&lt;cui:icon icon="cui-icon-drink" size="xl" /&gt;</pre></td>
                        <td><span class="cui-icon cui-icon-drink cui-icon-xl"></span></td>
                    </tr>
                    <tr>
                        <td><pre>&lt;cui:icon icon="cui-icon-temple_hindu" size="xl" state="info" titleValue="The Title to be displayed"/&gt; </pre></td>
                        <td><span class="cui-icon cui-icon-temple_hindu cui-icon-xl cui-icon-state-info" title="The Title to be displayed"></span></td>
                    </tr>
                 </table>
             <h3>Styling</h3>
                 <ul>
                     <li>The marker css class is cui-icon</li>
                     <li>Sizing: cui-icon-xl, cui-icon-lg,..</li>
                     <li>State: cui-icon-state-info, cui-icon-state-error,..</li>
                 </ul>
       ]]>
        </description>
        <tag-name>icon</tag-name>
        <component>
            <component-type>com.icw.cui.bootstrap.icon</component-type>
            <renderer-type>com.icw.cui.bootstrap.icon_renderer</renderer-type>
        </component>
        <attribute>
            <description><![CDATA[The component identifier for this component. This value must be
                unique within the closest parent component that is a naming
                container.]]>
            </description>
            <name>id</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description><![CDATA[Flag indicating whether or not this component should be rendered
                (during Render Response Phase), or processed on any subsequent
                form submit. The default value for this property is true.]]>
            </description>
            <name>rendered</name>
            <required>false</required>
            <type>boolean</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Space-separated list of CSS style class(es) to be applied additionally when
                this element is rendered.]]>
            </description>
            <name>styleClass</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[ CSS style(s) to be applied when this component is rendered.
               Caution: The styleClass attribute is always to be preferred.]]>
            </description>
            <name>style</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[A defined icon class, defined within stylesheet, e.g.  cui-icon-warning.
               In order to prevent improper usage the matching is restricted to the
                prefixes: "cui-icon, cui-mime-type, ui-icon-". If none of them is matched it
                will default to "cui-icon-circle_question_mark".]]>
            </description>
            <name>icon</name>
            <required>true</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Different general styles available (state): one of 'primary', 'success', 'info', 'warning', 'danger'.
                    If none of those is set it uses 'default'.]]>
            </description>
            <name>state</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Adapts the size of the component. Supported values are 'lg', 'xl', 'xxl', 'xxxl' based on bootstrap context-sizes.
                   Default: no size is set.]]>
            </description>
            <name>size</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[The key for looking up the text to be rendered as title-attribute
                Although this attribute is not required you must provide either this or #titleValue if you want a title to be rendered.]]>
            </description>
            <name>titleKey</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[The object to be rendered as title-attribute. This is a replacement for #titleKey.
             If both are present titleValue takes precedence.]]>
            </description>
            <name>titleValue</name>
            <required>false</required>
            <type>java.io.Serializable</type>
        </attribute>
    </tag>
    <tag>
        <description><![CDATA[<p>Replaces the HtmlMessage and integrates with the bootstrap based theming.
      In addition to the usual behavior you can attach multiple ids to one message element,
      see attribute forIdentifier
        Styling
        In opposite to HtmlMessage the styling is to be done using central styling using styleClass attribute,
        not one of the attributes errorClass, infoClass, .. . Depending on the severity of the faces Messages,
        there will we be rendered the class attribute to the surrounding span:
        "cui_msg_info", "cui_msg_warn", "cui_msg_error" or "cui_msg_fatal".</p><p> More information and
    examples can be found in the <a href="https://cui-ux-trunk.ci.dev.icw.int:16000/cui-reference-documentation/faces/pages/documentation/cui_components/demo/layout.jsf" >Reference Documentation</a>
    </p>]]></description>
        <tag-name>message</tag-name>
        <component>
            <component-type>com.icw.cui.bootstrap.cuimessage</component-type>
            <renderer-type>com.icw.cui.bootstrap.cuimessage_renderer</renderer-type>
        </component>
        <attribute>
            <description>
                <![CDATA[The id of the child input component. Defaults to 'input'. Usually to be kept the same.
               In special cases you can provides a space separated list for the forIdentifier attribute
                resulting in n message elements being appended.]]>
            </description>
            <name>forIdentifier</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[The component identifier for this component.  This value must be
                unique within the closest parent component that is a naming
                container.]]>
            </description>
            <name>id</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Flag indicating whether or not this component should be rendered
                (during Render Response Phase), or processed on any subsequent
                form submit.  The default value for this property is true.]]>
            </description>
            <name>rendered</name>
            <required>false</required>
            <type>boolean</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Flag indicating whether the summary portion of displayed messages
                should be included. Default value is "true".]]>
            </description>
            <name>showSummary</name>
            <required>false</required>
            <type>boolean</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Flag indicating whether the detail portion of displayed messages
                should be included. Default value is "false". If false, the detail is displayed as tooltip.]]>
            </description>
            <name>showDetail</name>
            <required>false</required>
            <type>boolean</type>
        </attribute>
        <attribute>
            <description><![CDATA[Flag indicating that characters that are sensitive
                in HTML and XML markup must be escaped.  If omitted, this
                flag is assumed to be "true".]]>
            </description>
            <name>escape</name>
            <required>false</required>
            <type>boolean</type>
        </attribute>
    </tag>
    <tag>
        <description>
            <![CDATA[
             <p>
                Renders an MimeTypeIcon regarding to the cui-icon contract. The actual rendering model is documented in the <a href="https://wiki.icw.int/x/44HzAg">Wiki</a></p>
             <p>A list of all available mimeTypeIcons can be found at the <a href="https://cui-ux-trunk.ci.dev.icw.int:16000/cui-reference-documentation/faces/pages/documentation/icons/mime_types.jsf">Reference Documentation</a> </p>

            <h3>Usage</h3>
                <table>
                    <tr>
                        <td><pre>&lt;cui:mimeTypeIcon mimeTypeString="AUDIO_MPEG" titleValue="AUDIO_MPEG" size="xl" /&gt;</pre></td>
                        <td><span title="AUDIO_MPEG" class="cui-icon-stack cui-icon-xl">
                            <i class="cui-mime-type cui-icon-stack-1x cui-mime-type-folder"></i>
                            <i class="cui-mime-type cui-icon-stack-1x cui-mime-type-no-decorator"></i>
                            <i class="cui-mime-type cui-icon-stack-1x cui-mime-type-placeholder cui-mime-type-audio_mpeg-placeholder"></i>
                            <i class="cui-mime-type cui-icon-stack-1x cui-mime-type-audio_mpeg"></i>
                        </span></td>
                    </tr>
                 </table>
             <h3>Styling</h3>
                 <ul>
                    <li>The marker css classes are cui-icon-stack and cui-mime-type</li>
                    <li>Sizing: cui-icon-xl, cui-icon-lg,..</li>
                    <li>The actual rendering model is documented in the <a href="https://wiki.icw.int/x/44HzAg">Wiki</a></li>
                 </ul>
       ]]>
        </description>
        <tag-name>mimeTypeIcon</tag-name>
        <component>
            <component-type>com.icw.cui.bootstrap.icon.mime_type</component-type>
            <renderer-type>com.icw.cui.bootstrap.icon.mime_type_renderer</renderer-type>
        </component>
        <attribute>
            <description><![CDATA[The component identifier for this component. This value must be
                unique within the closest parent component that is a naming container.]]>
            </description>
            <name>id</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description><![CDATA[Flag indicating whether or not this component should be rendered
                (during Render Response Phase), or processed on any subsequent
                form submit. The default value for this property is true.]]>
            </description>
            <name>rendered</name>
            <required>false</required>
            <type>boolean</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Space-separated list of CSS style class(es) to be applied additionally when
                this element is rendered.]]>
            </description>
            <name>styleClass</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[CSS style(s) to be applied when this component is rendered.
               Caution: The styleClass attribute is always to be preferred. ]]>
            </description>
            <name>style</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Additional class for the decorating layer. Defaults to "cui-mime-type-no-decorator"]]>
            </description>
            <name>decoratorClass</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Adapts the size of the component. Supported values are 'lg', 'xl', 'xxl', 'xxxl' based on bootstrap context-sizes.
                   Default: no size is set.]]>
            </description>
            <name>size</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[The MimeTypeIcon to be displayed. In case #mimeTypeIcon and
                #mimeTypeString is set #mimeTypeIcon take precedence.]]>
            </description>
            <name>mimeTypeIcon</name>
            <required>false</required>
            <type>de.cuioss.uimodel.model.MimeTypeIcon</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[The string representation of a concrete mime-type. In case #mimeTypeIcon and
                #mimeTypeString is set #mimeTypeIcon take precedence.]]>
            </description>
            <name>mimeTypeString</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[The key for looking up the text to be rendered as title-attribute
                Although this attribute is not required you must provide either this or #titleValue if you want a title to be rendered.]]>
            </description>
            <name>titleKey</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[The object to be rendered as title-attribute. This is a replacement for #titleKey.
             If both are present titleValue takes precedence.]]>
            </description>
            <name>titleValue</name>
            <required>false</required>
            <type>java.io.Serializable</type>
        </attribute>
    </tag>
    <tag>
        <description>
            <![CDATA[Creates a bootstrap conform navigation structure. In case the menuModel has children, it creates a subcomponent for each of the children.]]>
        </description>
        <tag-name>navigationMenu</tag-name>
        <component>
            <component-type>com.icw.cui.bootstrap.navigationmenu</component-type>
            <renderer-type>com.icw.cui.bootstrap.navigationmenu_renderer</renderer-type>
        </component>
        <attribute>
            <description><![CDATA[The component identifier for this component.  This value must be
                unique within the closest parent component that is a naming
                container. Caution: The component itself is not a naming container]]>
            </description>
            <name>id</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description><![CDATA[Flag indicating whether or not this component should be rendered
                (during Render Response Phase), or processed on any subsequent
                form submit.  The default value for this property is true.]]>
            </description>
            <name>rendered</name>
            <required>false</required>
            <type>boolean</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Space-separated list of CSS style class(es) to be applied additionally when
                this element is rendered.]]>
            </description>
            <name>styleClass</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[CSS style(s) to be applied when this component is rendered.
               Caution: The styleClass attribute is always to be preferred.]]>
            </description>
            <name>style</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description><![CDATA[The model to be utilized by the component.]]></description>
            <name>model</name>
            <required>false</required>
            <type>de.cuioss.jsf.components.model.menu.NavigationMenuItem</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[A list of NavigationMenuItems to be utilized by the component. Takes precedence over the model attribute.]]></description>
            <name>modelItems</name>
            <required>false</required>
            <type>java.util.List</type>
        </attribute>
    </tag>
    <tag>
        <description>
            <![CDATA[
           <p>
            Renders an Label for input elements.
               The label and title are resolved using the cui standard label-resolving mechanism.</p>
            <p>Sample can be found at the <a href="https://cui-ux-trunk.ci.dev.icw.int:16000/cui-reference-documentation/faces/pages/documentation/cui_components/demo/layout.jsf">Reference Documentation</a> </p>]]>
        </description>
        <tag-name>outputLabel</tag-name>
        <component>
            <component-type>com.icw.cui.bootstrap.outputlabel</component-type>
            <renderer-type>javax.faces.Label</renderer-type>
        </component>
        <attribute>
            <description><![CDATA[The component identifier for this component. This value must be
                unique within the closest parent component that is a naming
                container.]]>
            </description>
            <name>id</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description><![CDATA[Flag indicating whether or not this component should be rendered
                (during Render Response Phase), or processed on any subsequent
                form submit.  The default value for this property is true.]]>
            </description>
            <name>rendered</name>
            <required>false</required>
            <type>boolean</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Client identifier of the component for which this element
                is a label.]]>
            </description>
            <name>for</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Space-separated list of CSS style class(es) to be applied additionally when
                this element is rendered.]]>
            </description>
            <name>styleClass</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[The key for looking up the text display as the label.
                Although this attribute is not required the developer must provide either this or #labelValue if you want a label to be displayed]]>
            </description>
            <name>labelKey</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[The String displayed for the label. This is a replacement for #labelKey.
             If both are present labelValue takes precedence. If the type is not java.lang.String the
             developer must ensure that an according converter for the exists.]]>
            </description>
            <name>labelValue</name>
            <required>false</required>
            <type>java.io.Serializable</type>
        </attribute>
        <attribute>
            <description><![CDATA[The optional converter to be used in case of labelValue is set and needs conversion.
                The converter attribute sets the converter instance to be registered for this component.
                It must match the converter-id value of a converter element defined in your Faces configuration file. ]]></description>
            <name>labelConverter</name>
            <required>false</required>
            <type>javax.faces.convert.Converter</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[The key for looking up the text display as the title.
                Although this attribute is not required the developer must provide either this or #titleValue if you want a title to be displayed]]>
            </description>
            <name>titleKey</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[The String displayed for the title. This is a replacement for #titleKey.
             If both are present titleValue takes precedence.]]>
            </description>
            <name>titleValue</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[The optional converter to be used in case of titleValue is set and needs conversion.]]>
            </description>
            <name>titleConverter</name>
            <required>false</required>
            <type>javax.faces.convert.Converter</type>
        </attribute>
        <attribute>
            <description><![CDATA[Flag indicating that characters that are sensitive
                in HTML and XML markup must be escaped.  If omitted, this
                flag is assumed to be "true".]]>
            </description>
            <name>escape</name>
            <required>false</required>
            <type>boolean</type>
        </attribute>
    </tag>
    <tag>
        <description>
            <![CDATA[
             <p>
               Renders a bootstrap conform div with the styleClass 'row'.
            </p>
            <p>
            The layout relies completely on the grid-system of twitter-bootstrap,
            see <a href="http://getbootstrap.com/css/#grid">Bootstrap Documentation</a>
            </p>
            <ul>
                <li>Rows must be placed within a .container (fixed-width) or
                    .container-fluid (full-width) for proper alignment and padding.</li>
                <li>Use rows to create horizontal groups of columns.</li>
                <li>Content should be placed within columns, and only columns
                    may be immediate children of rows.</li>
            </ul>
            <p>
               More information and
               examples can be found in the <a href="https://cui-ux-trunk.ci.dev.icw.int:16000/cui-reference-documentation/faces/pages/documentation/cui_components/demo/layout.jsf" >Reference Documentation</a></p>
            <h3>Usage</h3>
                <pre>&lt;cui:row /&gt;</pre>
             <h3>Styling</h3>
             <ul>
                 <li>The marker css class is row</li>
             </ul>
       ]]>
        </description>
        <tag-name>row</tag-name>
        <component>
            <component-type>com.icw.cui.bootstrap.row</component-type>
            <renderer-type>com.icw.cui.bootstrap.layout_renderer</renderer-type>
        </component>
        <attribute>
            <description><![CDATA[The component identifier for this component.  This value must be
                unique within the closest parent component that is a naming
                container. Caution: The component itself is not a naming container]]>
            </description>
            <name>id</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description><![CDATA[Flag indicating whether or not this component should be rendered
                (during Render Response Phase), or processed on any subsequent
                form submit.  The default value for this property is true.]]>
            </description>
            <name>rendered</name>
            <required>false</required>
            <type>boolean</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Space-separated list of CSS style class(es) to be applied additionally when
                this element is rendered.]]>
            </description>
            <name>styleClass</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[CSS style(s) to be applied when this component is rendered.
               Caution: The styleClass attribute is always to be preferred.]]>
            </description>
            <name>style</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
    </tag>
    <tag>
        <description><![CDATA[Wraps a number of buttons. Quick means solely appending the CSS class
        'quick-control-group-right' and the styleClass attribute, if set, will be attached
        to the surrounding div. For more complex layouts use controlGroup.]]></description>
        <tag-name>quickControlGroup</tag-name>
        <component>
            <component-type>com.icw.cui.bootstrap.quickControlGroup</component-type>
            <renderer-type>com.icw.cui.bootstrap.layout_renderer</renderer-type>
        </component>
        <attribute>
            <description><![CDATA[The component identifier for this component. This value must be
                unique within the closest parent component that is a naming
                container. Caution: The component itself is not a naming container]]>
            </description>
            <name>id</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description><![CDATA[
               Defines the optional float alignment of the component. Supported values are 'left' or 'right',
               resulting in the additional corresponding css classes quick-control-group-right or
               quick-control-group-left being rendered. Defaults to right]]>
            </description>
            <name>align</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description><![CDATA[Flag indicating whether or not this component should be rendered
                (during Render Response Phase), or processed on any subsequent
                form submit. The default value for this property is true.]]>
            </description>
            <name>rendered</name>
            <required>false</required>
            <type>boolean</type>
        </attribute>
        <attribute>
            <description><![CDATA[
               Space-separated list of CSS style class(es) to be applied additionally when
                this element is rendered.]]>
            </description>
            <name>styleClass</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description><![CDATA[
               CSS style(s) to be applied when this component is rendered.
               Caution: The styleClass attribute is always to be preferred.]]>
            </description>
            <name>style</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
    </tag>
    <tag>
        <description>
            <![CDATA[
             <p>
             Renders a tag input component based on <a href="https://selectize.github.io/selectize.js/">Selectize</a>.
             </p>
             <p>
             All values are considered to be of type Set&lt;ConceptKeyType&gt;:
             <ul>
             <li>de.cuioss.jsf.bootstrap.taginput.TagInputComponent#getValue()</li>
             <li>de.cuioss.jsf.bootstrap.taginput.TagInputComponent#setValue(Object)</li>
             <li>de.cuioss.jsf.bootstrap.taginput.TagInputComponent#getSourceSet()</li>
             <li>de.cuioss.jsf.bootstrap.taginput.TagInputComponent#setSourceSet(Object)</li>
             </p>
             <h3>Rendering</h3>
             <ul>
             <li>Creates an &lt;input type="text" /&gt; with the clientId</li>
             <li>For each value found it writes de.cuioss.uimodel.model.conceptkey.ConceptKeyType#getIdentifier()
             as a colon separated list into the value attribute. The matching to labels is
             done by the Selectize JavaScript</li>
             <li>Selectize properties are transferred via pass through (data-)attributes.</li>
             <li>Using the component enabler mechanism, each input annotated with "data-selectize=true"
             gets initialized.</li>
             <ul>
             <li>Default configuration</li>
             <li>de.cuioss.jsf.bootstrap.taginput.TagInputComponent#getSourceSet() and
             de.cuioss.jsf.bootstrap.taginput.TagInputComponent#getClientCreated() are used to provide the
             matching of labels to values.</li>
             </ul>
             </li>
             </ul>
             <h3>Conversion</h3>
             Decoding the submitted string and encoding the list on ConceptKeyType is done by
             <code>de.cuioss.jsf.bootstrap.taginput.ConceptKeyStringConverter</code>, which is set as the
             components converter.
             <ul>
             <li>If no value is set for the clientId it calls
             de.cuioss.jsf.bootstrap.taginput.TagInputComponent#setSubmittedValue(Object) with <code>null</code>
             </li>
             <li>If there is a value available it splits them using "," as default separator</li>
             <li>Each element will be checked whether it is initially provided
             de.cuioss.jsf.bootstrap.taginput.TagInputComponent#getSourceSet() or
             de.cuioss.jsf.bootstrap.taginput.TagInputComponent#getClientCreated(). If so, the corresponding
             de.cuioss.uimodel.model.conceptkey.ConceptKeyType will be added to the resulting java.util.Set</li>
             <li>In case the element can not be matched to the ones above it is checked
             whether it starts with "_client_created_" and if so a new
             de.cuioss.uimodel.model.conceptkey.impl.ConceptKeyTypeImpl will be created with the given key as
             de.cuioss.uimodel.model.conceptkey.ConceptKeyType#getIdentifier() and the name part as
             de.cuioss.uimodel.model.conceptkey.ConceptKeyType#getResolved(Locale). The element will now be added to the
             resulting java.util.Set and to de.cuioss.jsf.bootstrap.taginput.TagInputComponent#getClientCreated().
             </li>
             <li>If none of the above applies, the decode method will throw a
             ConverterException</li>
             <li>The resulting java.util.Set is finally set as value</li>
             </ul>
             <p>
             It implicitly sanitizes all input and output using the
             CuiSanitizer#PLAIN_TEXT
             </p>
             <h3>Ajax Events</h3>
             All HtmlInputText AJAX events are supported.
             <h3>Usage</h3>
             <p>See <a href="https://cui-ux-trunk.ci.dev.icw.int:16000/cui-reference-documentation/faces/pages/documentation/cui_components/demo/tag.jsf">Reference Documentation</a></p>
             <h3>Styling</h3>
             <p>The styling is defined by the selecitze.js plugin, see <a href="https://selectize.github.io/selectize.js/">Selectize</a> for details</p>.
                ]]>
        </description>
        <tag-name>tagInput</tag-name>
        <component>
            <component-type>com.icw.cui.bootstrap.taginput</component-type>
            <renderer-type>com.icw.cui.bootstrap.taginput_renderer</renderer-type>
        </component>
        <attribute>
            <description><![CDATA[The component identifier for this component. This value must be
                unique within the closest parent component that is a naming
                container.]]>
            </description>
            <name>id</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description><![CDATA[Flag indicating whether or not this component should be rendered
                (during Render Response Phase), or processed on any subsequent
                form submit. The default value for this property is true.]]>
            </description>
            <name>rendered</name>
            <required>false</required>
            <type>boolean</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Space-separated list of CSS style class(es) to be applied additionally when
                this element is rendered.]]>
            </description>
            <name>styleClass</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[The current value of this component. The value is expected to be a <code>java.util.Set</code>
                of <code>de.cuioss.uimodel.model.conceptkey.ConceptKeyType</code>.]]>
            </description>
            <name>value</name>
            <required>false</required>
            <type>java.util.Set</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[The initially available tags. The value is expected to be a <code>java.util.Set</code> of
                <code>de.cuioss.uimodel.model.conceptkey.ConceptKeyType</code>. Elements get ordered by display name]]>
            </description>
            <name>sourceSet</name>
            <required>false</required>
            <type>java.util.Set</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[<p>
                MethodExpression representing a value change listener method
                that will be notified when a new value has been set for this
                input component. The expression must evaluate to a public
                method that takes a <code>ValueChangeEvent</code>
                parameter,
                with a return type of void, <span class="changed_added_2_0">or
                to a public method that takes no arguments with a return type
                of void. In the latter case, the method has no way of easily
                knowing what the new value is, but this can be useful in cases
                where a notification is needed that "this value
                changed".</span>
                </p>]]>
            </description>
            <name>valueChangeListener</name>
            <required>false</required>
            <method-signature>void valueChange(javax.faces.event.ValueChangeEvent)
            </method-signature>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Defines whether the related input is required. Defaults to false.]]>
            </description>
            <name>required</name>
            <required>false</required>
            <type>boolean</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Indicates whether the user is allowed to dynamically create own Tags on the fly.
                User created tags, e.g. with the label 'MyTag' will be translated into a ConceptKeyType
                with the ConceptKeyType#getResolved(java.util.Locale) resulting in 'MyTag', ConceptKeyType#getIdentifier()
                resulting in '_client_created_MyTag'. The prefix '_client_created_' is useful to differentiate between
                the original tags and the ones create on the fly. Default value is true.]]>
            </description>
            <name>letUserCreateTags</name>
            <required>false</required>
            <type>boolean</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Defines the maximum number of items to be selected, defaults to 10.]]>
            </description>
            <name>maxItems</name>
            <required>false</required>
            <type>int</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[MethodExpression representing a validator method that will be called
                during Process Validations to perform correctness checks on the
                value of this component.  The expression must evaluate to a public
                method that takes FacesContext, UIComponent, and Object parameters,
                with a return type of void.]]>
            </description>
            <name>validator</name>
            <required>false</required>
            <method-signature>void validate(javax.faces.context.FacesContext, javax.faces.component.UIComponent,
                java.lang.Object)
            </method-signature>
        </attribute>
        <attribute>
            <description><![CDATA[Flag indicating whether or not this component should be rendered
                as read only component or as editable input component. Defaults to false, which
                means editable input component.]]>
            </description>
            <name>disabled</name>
            <required>false</required>
            <type>boolean</type>
        </attribute>
        <attribute>
            <description><![CDATA[String used to separate the items in the generated Selectize JavaScript.]]>
            </description>
            <name>delimiter</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Converter ID to be used to convert new items.]]>
            </description>
            <name>itemConverterId</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[If true, a remove button (cross) is displayed on each tag.]]>
            </description>
            <name>displayRemoveButton</name>
            <required>false</required>
            <type>java.lang.Boolean</type>
        </attribute>
    </tag>
    <tag>
        <description>
            <![CDATA[
             <p>
                Renders an Tag similar to a JIRA Tag. The tag is rendered within a span with the according classes.
               The content and title are resolved using the cui standard label-resolving mechanism. More information and
               examples can be found in the <a href="https://cui-ux-trunk.ci.dev.icw.int:16000/cui-reference-documentation/faces/pages/documentation/cui_components/demo/tag.jsf" >Reference Documentation</a></p>
            <h3>Usage</h3>
                <table>
                    <tr>
                        <td><pre>&lt;cui:tag contentValue="Some Value" /&gt;</pre></td>
                        <td><span class="label label-default">Some Value</span></td>
                    </tr>
                    <tr>
                         <td><pre>&lt;cui:tag contentValue="Some Value" size="xl" state="info" /&gt;</pre></td>
                        <td><span class="label label-info cui-tag-xl">Some Value</span></td>
                    </tr>
                 </table>
             <h3>Styling</h3>
                 <ul>
                     <li>The marker css class is label</li>
                     <li>Sizing: cui-tag-lg, cui-tag-xl. ..</li>
                     <li>State:cui-tag-info, cui-tag-danger,..</li>
                 </ul>
       ]]>
        </description>
        <tag-name>tag</tag-name>
        <component>
            <component-type>com.icw.cui.bootstrap.tag</component-type>
            <handler-class>de.cuioss.jsf.bootstrap.tag.TagHandler</handler-class>
            <renderer-type>com.icw.cui.bootstrap.tag_renderer</renderer-type>
        </component>
        <attribute>
            <description><![CDATA[The component identifier for this component. This value must be
                unique within the closest parent component that is a naming
                container.]]>
            </description>
            <name>id</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description><![CDATA[Flag indicating whether or not this component should be rendered
                (during Render Response Phase), or processed on any subsequent
                form submit. The default value for this property is true.]]>
            </description>
            <name>rendered</name>
            <required>false</required>
            <type>boolean</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Space-separated list of CSS style class(es) to be applied additionally when
                this element is rendered.]]>
            </description>
            <name>styleClass</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[CSS style(s) to be applied when this component is rendered.
               Caution: The styleClass attribute is always to be preferred. ]]>
            </description>
            <name>style</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description><![CDATA[Different general styles available (state): one of 'primary', 'success',
                'info', 'warning', 'danger'. If none of those is set it uses 'default'.]]>
            </description>
            <name>state</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Adapts the size of the component. Supported values are 'lg', 'xl', 'sm'
                based on bootstrap context-sizes. Default: no size is set.]]>
            </description>
            <name>size</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[The key for looking up the text to be rendered. Although this attribute is
                not required you must provide either this or #contentValue if you want the text
                content to be displayed.]]>
            </description>
            <name>contentKey</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[The object to be rendered as text-content. This is a replacement for
                #contentKey. If both are present contentValue takes precedence.]]>
            </description>
            <name>contentValue</name>
            <required>false</required>
            <type>java.io.Serializable</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[The optional converter to be used in case of contentValue is set and needs
                conversion]]>
            </description>
            <name>contentConverter</name>
            <required>false</required>
            <type>javax.faces.convert.Converter</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Indicates whether the content is to be escaped on output or not. Default
                is true]]>.
            </description>
            <name>contentEscape</name>
            <required>false</required>
            <type>boolean</type>
        </attribute>
        <attribute>
            <description><![CDATA[Indicates whether the tag can be disposed. In case you set it to true you
                must provide the according model. If not it falls back to #contentValue]]>
            </description>
            <name>disposable</name>
            <required>false</required>
            <type>boolean</type>
        </attribute>
        <attribute>
            <description><![CDATA[Method expression to listen to dispose events.
                       The listener must be in the form of
                       <pre>public void methodName(de.cuioss.jsf.api.components.events.ModelPayloadEvent disposeEvent)</pre>]]>
            </description>
            <name>disposeListener</name>
            <required>false</required>
            <type>javax.el.MethodExpression</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[The model to be be attached to the component. This can be anything, if is
                at lease Serializable. It is needed in context of #disposable. This will be the
                value that will set as payload of the TagDisposeEvent. In case it is not set the
                component will fallback to #contentValue.]]>
            </description>
            <name>model</name>
            <required>false</required>
            <type>java.io.Serializable</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[The key for looking up the text to be rendered as title-attribute Although
                this attribute is not required you must provide either this or #titleValue if you
                want a title to be rendered.]]>
            </description>
            <name>titleKey</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[The object to be rendered as title-attribute. This is a replacement for
                #titleKey. If both are present titleValue takes precedence.]]>
            </description>
            <name>titleValue</name>
            <required>false</required>
            <type>java.io.Serializable</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[The optional converter to be used in case of titleValue is set and needs
                conversion.]]>
            </description>
            <name>titleConverter</name>
            <required>false</required>
            <type>javax.faces.convert.Converter</type>
        </attribute>
    </tag>
    <tag>
        <description>
            <![CDATA[
             <p>
               Renders a number of <cui:tag /> as a a list. The tags are created from the the given Collection of ConceptKeyType or String, see attributes #value. If you need fine grained control use <cui:tag /> directly. The attributes #state, #size and #contentEscape will be passed through to the used TagComponent.
               More information and examples can be found in the <a href="https://cui-ux-trunk.ci.dev.icw.int:16000/cui-reference-documentation/faces/pages/documentation/cui_components/demo/tag.jsf" >Reference Documentation</a></p>
            <h3>Usage</h3>
                <pre>&lt;tagList value="#{bean.tags}" /&gt;</pre>
             <h3>Styling</h3>
                 <ul>
                     <li>The marker css class is "list-inline" for the surrounding ul</li>
                     <li>Sizing: Will be passed through to <cui:tag /></li>
                     <li>State: Will be passed through to <cui:tag /></li>
                 </ul>
       ]]>
        </description>
        <tag-name>tagList</tag-name>
        <component>
            <component-type>com.icw.cui.bootstrap.taglist</component-type>
            <renderer-type>com.icw.cui.bootstrap.taglist_renderer</renderer-type>
        </component>
        <attribute>
            <description><![CDATA[The component identifier for this component. This value must be unique
                within the closest parent component that is a naming container.]]>
            </description>
            <name>id</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description><![CDATA[Flag indicating whether or not this component should be rendered (during
                Render Response Phase), or processed on any subsequent form submit. The default
                value for this property is true. ]]></description>
            <name>rendered</name>
            <required>false</required>
            <type>boolean</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[The current value of this component. The value is expected to be either a
                single de.cuioss.uimodel.model.conceptkey.ConceptKeyType / String or a
                java.util.Collection of ConceptKeyTypes / Strings.]]>
            </description>
            <name>value</name>
            <required>true</required>
            <type>java.lang.Object</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Space-separated list of CSS style class(es) to be applied additionally
                when this element is rendered.]]>
            </description>
            <name>styleClass</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[CSS style(s) to be applied when this component is rendered. Caution: The
                styleClass attribute is always to be preferred.]]>
            </description>
            <name>style</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Different general styles available (state): one of 'primary', 'success',
                'info', 'warning', 'danger'. If none of those is set it uses 'default'.]]>
            </description>
            <name>state</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Adapts the size of the component. Supported values are 'lg', 'xl', 'sm'
                based on bootstrap context-sizes. Default: no size is set.]]>
            </description>
            <name>size</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Indicates whether the content is to be escaped on output or not. Default
                is true.]]>
            </description>
            <name>contentEscape</name>
            <required>false</required>
            <type>boolean</type>
        </attribute>
    </tag>
    <!-- Composite Components (Bootstrap Library) -->
    <tag>
        <description><![CDATA[<h2>Renders an editable list</h2>
            <p>The iterable, derived by EditableDataListModel#getLoadedItems()
   will be exposed as a request-scoped variable with the name #{item.wrapped} The 'item' is of type de.cuioss.jsf.api.components.model.datalist.ItemWrapper
   and provides same additional runtime information, see javadoc for details.</p>
   <p>The component requires the two facets 'header' and 'display' for rendering the corresponding lines.
   The actual editable part is expected as child of this component. All that elements will be implicitly put in a cui:row,
   therefore you can use cui:columns for layouting / spacing directly.</p>
   <p>Adding or deleting of rows can be disabled by either setting "enableNew" or "enableDelete" to false</p>
   <p>By pressing the edit button of a row, the output fields are replaced with input fields,
   while preserving the overall table layout.
   This behavior can be changed by setting "inlineEditMode" to false. In this case, the input fields are arranged in a column based manner.
   Saying, from top to bottom, one field per line. Hint: Add the CSS class "form-horizontal" to the form in this case.</p>
   <h2>Supported Facets:</h2>
   <p>
       <ul>
            <li>header</li>
            <li>display</li>
            <li>header-addon: Rendered at the beginning of the button group of the 'Add' button</li>
            <li>edit-addon: Rendered at the beginning of the button group of the adding and editing pages.</li>
       </ul>
   </p>
   <h2>Supported ClientBehaviour:</h2>
   <p>
       <ul>
            <li>addNew: Defines the client behavior to be attached to the 'add' button, located in the upper right corner</li>
            <li>addSave: Defines the client behavior to be attached to the 'addSave' button</li>
            <li>addCancel: Defines the client behavior to be attached to the 'addCancel' button</li>
            <li>editSave: Defines the client behavior to be attached to the 'editSave' button</li>
            <li>addSave: Defines the client behavior to be attached to the 'addSave' button</li>
            <li>editCancel: Defines the client behavior to be attached to the 'editCancel' button</li>
            <li>edit: Defines the client behavior to be attached to the 'edit' button</li>
            <li>delete: Defines the client behavior to be attached to the 'delete' button</li>
            <li>undoDelete: Defines the client behavior to be attached to the 'undoDelete' button</li>
            <li>change: Defines the (combined) client behavior to be attached to: addSave, editSave, delete, undoDelete</li>
       </ul>
       Use it with process="@none"(!) to circumvent an unwanted second/subsequent actionListener execution.
       E.g.: <code>&lt;p:ajax process=&quot;@none&quot; event=&quot;eventname&quot; update=&quot;#{cc.attrs.update}&quot; /&gt;</code>
   </p>
   ]]></description>
        <tag-name>editableDataList</tag-name>
        <component>
            <resource-id>cui-composite/editableDataList.xhtml</resource-id>
        </component>
        <attribute>
            <description><![CDATA[The model for interacting with the data list.
              Always consider extending de.cuioss.jsf.api.components.model.datalist.impl.AbstractEditableDataListModel]]></description>
            <name>model</name>
            <required>true</required>
            <type>de.cuioss.jsf.api.components.model.datalist.EditableDataListModel</type>
        </attribute>
        <attribute>
            <description><![CDATA[The component identifier for this component. This value must be
                unique within the closest parent component that is a naming
                container. Caution: The component itself is not a naming container]]>
            </description>
            <name>id</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description><![CDATA[Flag indicating whether or not this component should be rendered
                (during Render Response Phase), or processed on any subsequent
                form submit. The default value for this property is true.]]>
            </description>
            <name>rendered</name>
            <required>false</required>
            <type>boolean</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[If true, at least one entry is required in the result list, otherwise a validation error is triggered.]]>
            </description>
            <name>required</name>
            <required>false</required>
            <type>boolean</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Message key to be resolved and displayed if a validation error occurs. Defaults to 'common.validator.required.message'.]]>
            </description>
            <name>requiredMessageKey</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Resolved message to be displayed if a validation error occurs.]]>
            </description>
            <name>requiredMessageValue</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Space separated strings of validator IDs. The validator receiving the model as value.]]>
            </description>
            <name>modelValidator</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Space-separated list of CSS style class(es) to be applied additionally when
                this element is rendered.]]>
            </description>
            <name>styleClass</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[CSS style(s) to be applied when this component is rendered.
               Caution: The styleClass attribute is always to be preferred.]]>
            </description>
            <name>style</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description><![CDATA[Enables the edited by double-clicking the corresponding line, defaults to true.]]>
            </description>
            <name>enableDoubleClickEdit</name>
            <required>false</required>
            <type>boolean</type>
        </attribute>
        <attribute>
            <description><![CDATA[Sets the rendered attribute of the 'edit' button. Defaults to true.]]>
            </description>
            <name>enableEdit</name>
            <required>false</required>
            <type>boolean</type>
        </attribute>
        <attribute>
            <description><![CDATA[Sets the rendered attribute of the 'addNew' button. Defaults to true.]]>
            </description>
            <name>enableNew</name>
            <required>false</required>
            <type>boolean</type>
        </attribute>
        <attribute>
            <description><![CDATA[Sets the rendered attribute of the 'delete' button. Defaults to true.]]>
            </description>
            <name>enableDelete</name>
            <required>false</required>
            <type>boolean</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[If set to 'false', the input field/s are displayed in one column, one row per field. Defaults to true.]]>
            </description>
            <name>inlineEditMode</name>
            <required>false</required>
            <type>boolean</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[If set to 'false', the Add and Cancel buttons, displayed when adding an item, are not rendered. Defaults to 'true'. The rendering of the 'edit-addon' facet is not affected.]]>
            </description>
            <name>renderAddonButtonsInAddMode</name>
            <required>false</required>
            <type>boolean</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[If set to 'false', the Save and Cancel buttons, displayed when editing an item, are not rendered. Defaults to 'true'. The rendering of the 'edit-addon' facet is not affected.]]>
            </description>
            <name>renderAddonButtonsInEditMode</name>
            <required>false</required>
            <type>boolean</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Message key to be resolved and displayed when there is no data available.]]>
            </description>
            <name>emptyMessageKey</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Resolved message to be displayed when there is no data available.]]>
            </description>
            <name>emptyMessageValue</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
    </tag>
    <tag>
        <description><![CDATA[<p>Renders a fancy waiting indicator.</p>
   ]]></description>
        <tag-name>waitingIndicator</tag-name>
        <component>
            <component-type>de.cuioss.jsf.api.waitingindicator</component-type>
            <renderer-type>de.cuioss.jsf.api.waitingindicator_renderer</renderer-type>
        </component>
        <attribute>
            <description><![CDATA[The component identifier for this component. This value must be unique
                within the closest parent component that is a naming container.]]>
            </description>
            <name>id</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description><![CDATA[Flag indicating whether or not this component should be rendered (during
                Render Response Phase), or processed on any subsequent form submit. The default
                value for this property is true.]]>
            </description>
            <name>rendered</name>
            <required>false</required>
            <type>boolean</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Sets the size for the element, must be one of the appropriate
                bootstrap size-prefixes, currently supported are 'xs', 'sm', 'md', 'ld.'. Default is 'md']]>
            </description>
            <name>size</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Space-separated list of CSS style class(es) to be applied additionally
                when this element is rendered.]]>
            </description>
            <name>styleClass</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[CSS style(s) to be applied when this component is rendered. Caution: The
                styleClass attribute is always to be preferred.]]>
            </description>
            <name>style</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
    </tag>
    <tag>
        <description><![CDATA[<h2>Renders a text input to be used for filtering the result</h2>
            <p>Supports lazy initialization after page load, typewatch to minimize the backend calls,
            and displaying a waiting indicator during refresh.</p>
   ]]></description>
        <tag-name>textFilter</tag-name>
        <component>
            <resource-id>cui-composite/textFilter.xhtml</resource-id>
        </component>
        <attribute>
            <description><![CDATA[ActionListener method to be invoked on change of text input.]]></description>
            <name>action</name>
            <required>true</required>
            <method-signature>void action()</method-signature>
        </attribute>
        <attribute>
            <description><![CDATA[ActionListener method to be invoked on click of reset filter.]]>
            </description>
            <name>clearFilter</name>
            <required>false</required>
            <method-signature>void clearFilter()</method-signature>
        </attribute>
        <attribute>
            <description><![CDATA[To store the filter text.]]>
            </description>
            <name>filterInput</name>
            <required>true</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description><![CDATA[The id of the waiting indicator.]]>
            </description>
            <name>waitingIndicatorId</name>
            <required>true</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[The id of the content. Please use the "real" id and no "@form" shortcut.]]>
            </description>
            <name>contentId</name>
            <required>true</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[The id to update after change.]]>
            </description>
            <name>updateIds</name>
            <required>true</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[If true, trigger an initial lazy loading after page loading.]]>
            </description>
            <name>triggerInitialLoading</name>
            <required>false</required>
            <type>boolean</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[The key of the filter input label.]]>
            </description>
            <name>filterLabelKey</name>
            <required>true</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[The default mode for the labeledContainer.]]>
            </description>
            <name>layoutMode</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
    </tag>
    <tag>
        <description><![CDATA[<h2>Renders a text input to be used for filtering the result</h2>
            <p>Supports lazy initialization after page load, typewatch to minimize the backend calls,
            and displaying a waiting indicator during refresh. To be used with a LazyLoadingComponent.</p>
   ]]></description>
        <tag-name>lazyLoadingTextFilter</tag-name>
        <component>
            <resource-id>cui-composite/lazyLoadingTextFilter.xhtml</resource-id>
        </component>
        <attribute>
            <description>
                <![CDATA[Space-separated list of CSS style class(es) to be applied additionally
                when this element is rendered.]]>
            </description>
            <name>styleClass</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[CSS style(s) to be applied when this component is rendered. Caution: The
                styleClass attribute is always to be preferred.]]>
            </description>
            <name>style</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description><![CDATA[ActionListener method to be invoked on change of text input.]]></description>
            <name>searchAction</name>
            <required>true</required>
            <method-signature>void action()</method-signature>
        </attribute>
        <attribute>
            <description><![CDATA[ActionListener method to be invoked on click of reset filter.]]>
            </description>
            <name>clearFilterAction</name>
            <required>false</required>
            <method-signature>void clearFilter()</method-signature>
        </attribute>
        <attribute>
            <description><![CDATA[To store the filter text.]]>
            </description>
            <name>value</name>
            <required>true</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[The ids to update after change. Should include the LazyLoadingComponent.]]>
            </description>
            <name>update</name>
            <required>true</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[The key of the input label.]]>
            </description>
            <name>labelKey</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[The value of the input label.]]>
            </description>
            <name>labelValue</name>
            <required>false</required>
            <type>java.io.Serializable</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[The key of the input placeholder.]]>
            </description>
            <name>placeholderKey</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[The value of the input placeholder.]]>
            </description>
            <name>placeholderValue</name>
            <required>false</required>
            <type>java.io.Serializable</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[The default mode for the LabeledContainer. Defines how the layout will be rendered. Layout mode 'column' renders
                component as form-group with column structure. Layout mode 'formgroup' renders
                component as form-group without column structure. Layout mode 'label_sr_only'
                renders a form-group structure with label style class 'sr-only' which will display
                it only for screen readers but will hide it for standard browsers. Mode 'plain'
                ignore columns size settings. Allowed are 'plain', 'formgroup', 'label_sr_only' and
                'column'. Default is currently 'column']]>
            </description>
            <name>layoutMode</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
    </tag>
    <tag>
        <description><![CDATA[<h2>Wrappes a primefaces scheduler.</p>
   ]]></description>
        <tag-name>scheduler</tag-name>
        <component>
            <resource-id>cui-composite/scheduler.xhtml</resource-id>
        </component>
        <attribute>
            <description>
                <![CDATA[An org.primefaces.model.ScheduleModel instance representing the backed model.]]></description>
            <name>model</name>
            <required>true</required>
            <type>org.primefaces.model.ScheduleModel</type>
        </attribute>
        <attribute>
            <description><![CDATA[When true, events are resizable. Default is true.]]></description>
            <name>resizable</name>
            <required>false</required>
            <type>boolean</type>
        </attribute>
        <attribute>
            <description><![CDATA[When true, events are draggable. Default is true.]]></description>
            <name>draggable</name>
            <required>false</required>
            <type>boolean</type>
        </attribute>
        <attribute>
            <description><![CDATA[Determines the time-text that will be displayed on each event.]]></description>
            <name>timeFormat</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
    </tag>
    <tag>
        <description><![CDATA[<h2>Renders a dashboard consisting of several widgets</h2>
        <p>Each widget model should contain the name of the composite component to be rendered and to display its content.</p>
   ]]></description>
        <tag-name>dashboard</tag-name>
        <component>
            <handler-class>de.cuioss.jsf.bootstrap.dashboard.DashboardTagHandler</handler-class>
        </component>
        <attribute>
            <description>
                <![CDATA[A list of de.cuioss.jsf.api.components.model.widget.DashboardWidgetModel]]>
            </description>
            <name>widgets</name>
            <required>true</required>
            <type>java.util.List</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Space-separated list of CSS style class(es) to be applied when
                this element is rendered. Defaults to "dashboard-wrapper".]]>
            </description>
            <name>styleClass</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Space-separated list of CSS style class(es) to be applied to the widgets. Defaults to "col-md-6".]]>
            </description>
            <name>widgetStyleClass</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[CSS style(s) to be applied when this component is rendered.
               Caution: The styleClass attribute is always to be preferred.]]>
            </description>
            <name>style</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
    </tag>
    <tag>
        <description><![CDATA[An extension to h:outputLink that conforms to Bootstrap styling and incorporates the
            display of icons and styling as a button. If icon is set without labelKey / labelValue than only the icon will
            be rendered. Caution: do not use the content but the corresponding labelKey /
            labelValue. The same goes for the title element: use titleKey or titleValue. It will
            always be rendered as a button (visually) unless you set the state 'link']]>
        </description>
        <tag-name>outputLinkButton</tag-name>
        <component>
            <component-type>de.cuioss.jsf.api.bootstrap.outputLinkButton</component-type>
            <renderer-type>de.cuioss.jsf.api.bootstrap.outputLinkButton_renderer</renderer-type>
        </component>
        <attribute>
            <description><![CDATA[The component identifier for this component. This value must be unique
                within the closest parent component that is a naming container. Caution: The
                component itself is not a naming container]]>
            </description>
            <name>id</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description><![CDATA[Flag indicating whether or not this component should be rendered (during
                Render Response Phase), or processed on any subsequent form submit. The default
                value for this property is true.]]>
            </description>
            <name>rendered</name>
            <required>false</required>
            <type>boolean</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Space-separated list of CSS style class(es) to be applied additionally
                when this element is rendered.]]>
            </description>
            <name>styleClass</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[CSS style(s) to be applied when this component is rendered. Caution: The
                styleClass attribute is always to be preferred.]]>
            </description>
            <name>style</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Different general styles available (state): one of 'primary', 'success',
                'info', 'warning', 'danger', 'link'. If none of those is set it uses 'default'.]]>
            </description>
            <name>state</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Sets the size for the button element, must be one of the appropriate
                bootstrap size prefixes, currently supported is 'default', 'sm' and 'lg']]>
            </description>
            <name>size</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[The key for looking up the text display as the label. Although this
                attribute is not required the developer must provide either this or #labelValue if
                you want a label to be displayed]]>
            </description>
            <name>labelKey</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[The String displayed for the label. This is a replacement for #labelKey.
                If both are present labelValue takes precedence. If the type is not java.lang.String
                the developer must ensure that an according converter for the exists.]]>
            </description>
            <name>labelValue</name>
            <required>false</required>
            <type>java.io.Serializable</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[The key for looking up the text display as the title. Although this
                attribute is not required the developer must provide either this or #titleValue if
                you want a title to be displayed]]>
            </description>
            <name>titleKey</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[The String displayed for the title. This is a replacement for
                #titleKey. If both are present titleValue takes precedence.]]>
            </description>
            <name>titleValue</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[A defined icon class, defined within stylesheet, e.g. cui-icon-warning. In
                order to prevent improper usage the matching is restricted to the prefixes:
                "cui-icon, cui-mime-type, ui-icon-". If none of them is matched the access throws an
                IllegalArgumentException.]]>
            </description>
            <name>icon</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Defines the optional float alignment of the component. Supported values
                are 'left' or 'right']]>
            </description>
            <name>iconAlign</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Flag indicating that this element must never
                receive focus or be included in a subsequent
                submit.]]>
            </description>
            <name>disabled</name>
            <required>false</required>
            <type>boolean</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Position of this element in the tabbing order
                for the current document.  This value must be
                an integer between 0 and 32767.]]>
            </description>
            <name>tabindex</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Name of a frame where the resource
                retrieved via this hyperlink is to
                be displayed.]]>
            </description>
            <name>target</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[The ValueExpression linking this component to a property in a backing bean]]>
            </description>
            <name>binding</name>
            <required>false</required>
            <type>javax.faces.component.UIComponent</type>
        </attribute>
    </tag>
    <tag>
        <description><![CDATA[<h2>Displays a content that should be loaded lazy after initial page rendering.</h2>

 <p>The initial page will display the waiting indicator and trigger an ajax update of the content.
 This update will first call an ActionListener (if defined) during Invoke Application phase,
 and then switch the waiting indicator to be hidden and render the content.</p>]]>
        </description>
        <tag-name>lazyLoading</tag-name>
        <component>
            <component-type>de.cuioss.jsf.api.lazyLoading</component-type>
            <renderer-type>de.cuioss.jsf.api.lazyLoading_renderer</renderer-type>
        </component>
        <attribute>
            <description><![CDATA[The component identifier for this component. This value must be unique
                within the closest parent component that is a naming container. Caution: The
                component itself is not a naming container]]>
            </description>
            <name>id</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Space-separated list of CSS style class(es) to be applied additionally
                when this element is rendered. The component will always render its own styleClass: 'cui-lazy-loading']]>
            </description>
            <name>styleClass</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[ CSS style(s) to be applied when this component is rendered.
               Caution: The styleClass attribute is always to be preferred.]]>
            </description>
            <name>style</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description><![CDATA[Method expression to listen to ajax update events.
                       The listener must be in the form of
                       <pre>public void methodName(ActionEvent event)</pre>]]>
            </description>
            <name>actionListener</name>
            <required>false</required>
            <type>javax.faces.event.ActionListener</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Flag indicating if this component is already initialized or need to be loaded lazy.]]>
            </description>
            <name>initialized</name>
            <required>false</required>
            <type>boolean</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Flag indicating if the content of this component should be rendered.]]>
            </description>
            <name>renderContent</name>
            <required>false</required>
            <type>boolean</type>
        </attribute>
        <attribute>
            <description><![CDATA[A IDisplayNameProvider to be displayed as notification box.]]>
            </description>
            <name>notificationBoxValue</name>
            <required>false</required>
            <type>de.cuioss.uimodel.nameprovider.IDisplayNameProvider</type>
        </attribute>
        <attribute>
            <description><![CDATA[The state for the notification box.]]>
            </description>
            <name>notificationBoxState</name>
            <required>false</required>
            <type>de.cuioss.jsf.api.components.css.ContextState</type>
        </attribute>
        <attribute>
            <description><![CDATA[A view model.]]>
            </description>
            <name>viewModel</name>
            <required>false</required>
            <type>de.cuioss.jsf.api.components.model.lazyloading.LazyLoadingModel</type>
        </attribute>
        <attribute>
            <description><![CDATA[Start the initialization. Will be called at the first PostAddToView.]]>
            </description>
            <name>startInitialize</name>
            <required>false</required>
            <method-signature>void startInitialize()</method-signature>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Space-separated list of CSS style class(es) to be applied additionally
                to the waiting indicator component.]]>
            </description>
            <name>waitingIndicatorStyleClass</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description><![CDATA[When set to true, <p:autoUpdate/> elements will not be updated.]]>
            </description>
            <name>ignoreAutoUpdate</name>
            <required>false</required>
            <type>boolean</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[When set to true, ajax requests will be made asynchronous. Attention: There is a maximum in the number of connections a browser allows.]]>
            </description>
            <name>async</name>
            <required>false</required>
            <type>boolean</type>
        </attribute>
    </tag>
    <tag>
        <description>
            <![CDATA[
                 <p>
                   Blocks an (optional ajax based) element after clicking by adding a spinner and the "disabled" property to the element.
                   To unblock the element should can be updated via ajax.
                 </p>
                 <p>
                   More information and examples can be found in the
                   <a href="https://cui-ux-trunk.ci.dev.icw.int:16000/cui-reference-documentation/faces/pages/documentation/cui_components/demo/miscellaneous.jsf" >Reference Documentation</a>
                 </p>
           ]]></description>
        <tag-name>blockElement</tag-name>
        <component>
            <component-type>de.cuioss.jsf.components.blockelement</component-type>
        </component>
    </tag>
    <tag>
        <description><![CDATA[Helper / Decorator component used for rendering optional help texts for input-elements within LabeledContainerComponent.
        ]]>
        </description>
        <tag-name>helpText</tag-name>
        <component>
            <component-type>de.cuioss.jsf.api.helptext</component-type>
            <renderer-type>javax.faces.Hidden</renderer-type>
        </component>
        <attribute>
            <description><![CDATA[Flag indicating whether or not this component should be rendered (during
                Render Response Phase), or processed on any subsequent form submit. The default
                value for this property is true.]]>
            </description>
            <name>rendered</name>
            <required>false</required>
            <type>boolean</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[The key for looking up the text to be rendered as title-attribute
                Although this attribute is not required you must provide either this or #titleValue if you want a title to be rendered.
                If both are present #titleValue will take precedence]]>
            </description>
            <name>titleKey</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[The value for the title-attribute
                Although this attribute is not required you must provide either this or #titleKey if you want a title to be rendered.
                If both are present #titleValue will take precedence]]>
            </description>
            <name>titleValue</name>
            <required>false</required>
            <type>java.lang.Object</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[The key for looking up the help text to be rendered. Although this attribute is
                not required you must provide either this or #contentValue if you want the text
                content to be displayed or provide the help text as children.]]>
            </description>
            <name>contentKey</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[The object to be rendered as text-content. This is a replacement for
                #contentKey. If both are present contentValue takes precedence.]]>
            </description>
            <name>contentValue</name>
            <required>false</required>
            <type>java.io.Serializable</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[The optional converter to be used in case of contentValue is set and needs
                conversion]]>
            </description>
            <name>contentConverter</name>
            <required>false</required>
            <type>javax.faces.convert.Converter</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Indicates whether the content is to be escaped on output or not. Default
                is true.]]>
            </description>
            <name>contentEscape</name>
            <required>false</required>
            <type>boolean</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[If set to true, the help text is hidden and an info button is rendered to toggle the visibility. If set to false, no button is rendered and the help text is always shown. Default value is "false".]]>
            </description>
            <name>renderButton</name>
            <required>false</required>
            <type>boolean</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[The alignment of the button relative to the wrapped input, defaults to 'prepend'. Allowed values are 'append' and 'prepend']]>
            </description>
            <name>buttonAlign</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
    </tag>
    <tag>
        <description><![CDATA[<h2>Renders a section that may contain errors.</h2>
   ]]></description>
        <tag-name>resultContent</tag-name>
        <component>
            <resource-id>cui-composite/requestResultContent.xhtml</resource-id>
        </component>
        <attribute>
            <description>
                <![CDATA[Model to be displayed]]>
            </description>
            <name>model</name>
            <required>true</required>
            <type>de.cuioss.jsf.api.components.model.resultContent.ResultContent</type>
        </attribute>
    </tag>
</facelet-taglib>
