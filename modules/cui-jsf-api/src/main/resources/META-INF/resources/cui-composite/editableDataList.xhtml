<html xmlns="http://www.w3.org/1999/xhtml" xmlns:ui="http://xmlns.jcp.org/jsf/facelets"
      xmlns:composite="http://xmlns.jcp.org/jsf/composite" xmlns:p="http://primefaces.org/ui"
      xmlns:h="http://xmlns.jcp.org/jsf/html" xmlns:cui="http://www.icw.de/commons-webui"
      xmlns:jsf="http://xmlns.jcp.org/jsf">

<!-- INTERFACE -->
<composite:interface
    shortDescription="Renders an editable list. The iterable, derived by EditableDataListModel#getLoadedItems()
   will be exposed as a request-scoped variable with the with the name #{item.wrapped} The 'item' is of type de.cuioss.jsf.api.components.model.datalist.ItemWrapper
   and provides same additional runtime information, see javadoc for details. The component requires the two facets 'header' and 'display' for rendering the corresponding lines.
   The actual editable part is expected as children of this component. All that elements will be implicitly put in a cui:row,
   therefore you can use cui:columns for layouting / spacing directly. If a facet named 'header-addon' is present, its content is rendered at the beginning of the button group of the 'Add' button.
   If a facet named 'edit-addon' is present, its content is rendered at the beginning of the button group of the adding and editing pages.
   Disabling renderAddonButtonsInAddMode or renderAddonButtonsInEditMode does not have an effect on the rendering of this facet."
    componentType="com.icw.cui.bootstrap.editableDataList">
    <composite:attribute name="model" type="de.cuioss.jsf.api.components.model.datalist.EditableDataListModel"
                         required="true"
                         shortDescription="The model for interacting with the data list.
      Always consider extending de.cuioss.jsf.api.components.model.datalist.impl.AbstractEditableDataListModel"/>

    <composite:attribute name="styleClass" type="java.lang.String" required="false"
                         shortDescription="Additional css-classes to be applied to the list."/>
    <composite:attribute name="style" type="java.lang.String" required="false"
                         shortDescription="Additional style-attribute to be applied to the list."/>

    <composite:attribute name="required" type="boolean"
                         shortDescription="If true, at least one entry is required, otherwise a validation error is triggered."
                         required="false"
                         default="false"/>
    <composite:attribute name="requiredMessageKey" type="java.lang.String"
                         shortDescription="Message key to be resolved and displayed if a validation error occurs."
                         required="false"
                         default="cc.editableDataList.required"/>
    <composite:attribute name="requiredMessageValue" type="java.lang.String"
                         shortDescription="Resolved message to be displayed if a validation error occurs."
                         required="false"/>

    <composite:attribute name="modelValidator" type="java.lang.String" required="false"
                         shortDescription="Space separated strings of validator IDs. The validator receiving the model as value."/>

    <composite:attribute name="enableDoubleClickEdit" type="boolean"
                         shortDescription="Enables the edited by double-clicking the corresponding line, defaults to true"
                         required="false"
                         default="true"/>

    <composite:attribute name="enableNew" type="boolean"
                         shortDescription="Sets the rendered attribute of the 'addNew' button."
                         required="false" default="true"/>
    <composite:attribute name="enableEdit" type="boolean"
                         shortDescription="Sets the rendered attribute of the 'edit' button."
                         required="false" default="true"/>
    <composite:attribute name="enableDelete" type="boolean"
                         shortDescription="Sets the rendered attribute of the 'delete' button." required="false"
                         default="true"/>
    <composite:attribute name="renderAddonButtonsInAddMode" type="boolean"
                         shortDescription="If set to 'false', the Add and Cancel buttons, displayed when adding an item, are not rendered. Defaults to 'true'. The rendering of the 'edit-addon' facet is not affected."
                         required="false" default="true"/>
    <composite:attribute name="renderAddonButtonsInEditMode" type="boolean"
                         shortDescription="If set to 'false', the Save and Cancel buttons, displayed when editing an item, are not rendered. Defaults to 'true'. The rendering of the 'edit-addon' facet is not affected."
                         required="false" default="true"/>

    <composite:attribute name="inlineEditMode" type="boolean"
                         shortDescription="If set to 'false', the input field/s are displayed in one column, one row per field."
                         required="false"
                         default="true"/>

    <composite:attribute name="emptyMessageKey" type="java.lang.String"
                         shortDescription="Message key to be resolved and displayed when there is no data available."
                         required="false"/>
    <composite:attribute name="emptyMessageValue" type="java.lang.String"
                         shortDescription="Resolved message to be displayed when there is no data available."
                         required="false"/>

    <composite:facet name="header" required="true"
                     shortDescription="This facet is for rendering the header.
      It will be put in a cui:row, therefore you can use cui:columns for layouting / spacing directly."/>
    <composite:facet name="display" required="true"
                     shortDescription="This facet is for rendering a display-row.
      It will be put in a cui:row, therefore you can use cui:columns for layouting / spacing directly."/>
    <composite:facet name="header-addon" required="false"
                     shortDescription="This facet is for rendering additional components in the headline, right in front of the 'Add' button, if it is rendered. The 'enableNew' attribute does not affect this facet."/>
    <composite:facet name="edit-addon" required="false"
                     shortDescription="This facet is for rendering additional components during edit-mode or add-mode. Components are added in front of the existing buttons, if they are rendered."/>

    <composite:clientBehavior event="action" targets="addNew" name="addNew"
                              shortDescription="Defines the client behavior to be attached to the 'add' button, located in the upper right corner"/>
    <composite:clientBehavior event="action" targets="itemsList:addSave" name="addSave"
                              shortDescription="Defines the client behavior to be attached to the 'addSave' button"/>
    <composite:clientBehavior event="action" targets="itemsList:addCancel" name="addCancel"
                              shortDescription="Defines the client behavior to be attached to the 'cancelAdd' button"/>
    <composite:clientBehavior event="action" targets="itemsList:editSave" name="editSave"
                              shortDescription="Defines the client behavior to be attached to the 'editSave' button"/>
    <composite:clientBehavior event="action" targets="itemsList:editCancel" name="editCancel"
                              shortDescription="Defines the client behavior to be attached to the 'editCancel' button"/>
    <composite:clientBehavior event="action" targets="itemsList:edit" name="edit"
                              shortDescription="Defines the client behavior to be attached to the 'edit' button"/>
    <composite:clientBehavior event="action" targets="itemsList:delete" name="delete"
                              shortDescription="Defines the client behavior to be attached to the 'delete' button"/>
    <composite:clientBehavior event="action" targets="itemsList:undoDelete" name="undoDelete"
                              shortDescription="Defines the client behavior to be attached to the 'undoDelete' button"/>
    <composite:clientBehavior event="action"
                              targets="itemsList:addSave itemsList:editSave itemsList:delete itemsList:undoDelete"
                              name="change"
                              shortDescription="Defines the client behavior to be attached to all model changes, namely: addSave, editSave, delete, undoDelete"/>
</composite:interface>

<!-- IMPLEMENTATION -->
<composite:implementation>
    <div id="#{cc.clientId}">

        <!-- cui_msg_error used for CSS. Value is always "true" to trigger validator. -->
        <h:selectBooleanCheckbox id="validator" styleClass="hidden" value="true" validator="#{cc.validate}"/>
        <h:message for="validator" styleClass="cui_msg_error hidden"/>

        <ul jsf:id="list" style="#{cc.attrs.style}" class="#{cc.wrapperStyleClass}"
            data-all-items-in-view-mode="#{cc.attrs.model.everyItemSavedOrCanceled}"
            data-inline-edit-mode="#{cc.attrs.inlineEditMode}">

            <li class="list-group-item list-group-item-header"><cui:row>
                <composite:renderFacet name="header"/>
            </cui:row>

                <div class="list-group-item-addon">
                    <composite:renderFacet name="header-addon"/>

                    <cui:commandButton id="addNew" rendered="#{cc.attrs.enableNew}" size="lg" state="link"
                                       icon="cui-icon-plus" type="button"
                                       immediate="true" disabled="#{! cc.attrs.model.everyItemSavedOrCanceled}"
                                       actionListener="#{cc.attrs.model.addItem()}" titleKey="common.button.add">
                        <p:ajax update="@composite"/>
                    </cui:commandButton>
                </div>
            </li>

            <ui:repeat id="itemsList" value="#{cc.attrs.model.displayItems}" var="item">

                <!-- in edit mode -->
                <ui:fragment rendered="#{item.editMode}">
                    <li class="list-group-item list-group-item-add"><cui:row id="editItem">
                        <composite:insertChildren/>
                    </cui:row>

                        <div class="list-group-item-addon">
                            <composite:renderFacet name="edit-addon"/>

                            <!-- create new entry -->
                            <ui:fragment rendered="#{cc.isAddonButtonsInAddModeRendered(item)}">
                                <cui:commandButton id="addSave" state="primary" type="submit"
                                                   actionListener="#{cc.attrs.model.saveEditItem(item)}"
                                                   titleKey="common.button.add" labelKey="common.button.add">
                                    <p:ajax process="@composite:list" update="@composite"/>
                                </cui:commandButton>
                                <cui:commandButton id="addCancel" immediate="true" type="button"
                                                   actionListener="#{cc.attrs.model.cancelEditItem(item)}"
                                                   titleKey="common.button.cancel"
                                                   labelKey="common.button.cancel">
                                    <p:ajax update="@composite"/>
                                    <p:resetInput target="editItem" />
                                </cui:commandButton>
                            </ui:fragment>

                            <!-- edit existing entry -->
                            <ui:fragment rendered="#{cc.isAddonButtonsInEditModeRendered(item)}">
                                <cui:commandButton id="editSave" state="primary" type="submit"
                                                   actionListener="#{cc.attrs.model.saveEditItem(item)}"
                                                   titleKey="common.button.apply" labelKey="common.button.apply">
                                    <p:ajax process="editItem @this" update="@composite"/>
                                </cui:commandButton>
                                <cui:commandButton id="editCancel" immediate="true" type="button"
                                                   actionListener="#{cc.attrs.model.cancelEditItem(item)}"
                                                   titleKey="common.button.cancel"
                                                   labelKey="common.button.cancel">
                                    <p:ajax update="@composite"/>
                                    <p:resetInput target="editItem" />
                                </cui:commandButton>
                            </ui:fragment>
                        </div>
                    </li>
                </ui:fragment>

                <!-- in view mode -->
                <ui:fragment rendered="#{!item.editMode}">
                    <li class="list-group-item list-group-item-editable" data-marked-as-added="#{item.markedAsAdd}"
                        data-marked-as-edited="#{item.modifiedItem}" data-marked-as-deleted="#{item.markedForDelete}"
                        data-read-only="#{cc.attrs.model.isReadOnly(item.wrapped)}"
                        data-deletable="#{cc.attrs.enableDelete}">
                        <cui:row id="display">
                            <p:ajax event="dblclick" disabled="#{cc.editOnDoubleClickDisabled}"
                                    listener="#{cc.attrs.model.editItem(item)}" update="@composite"/>
                            <composite:renderFacet name="display"/>
                        </cui:row>
                        <ui:fragment rendered="#{!cc.attrs.model.isReadOnly(item.wrapped)}">
                            <div class="list-group-item-addon">
                                <cui:commandButton id="edit" immediate="true" size="lg" state="link"
                                                   icon="cui-icon-edit" type="button"
                                                   disabled="#{!cc.attrs.model.everyItemSavedOrCanceled}"
                                                   rendered="#{cc.attrs.enableEdit and !item.markedForDelete}"
                                                   actionListener="#{cc.attrs.model.editItem(item)}"
                                                   titleKey="common.button.edit">
                                    <p:ajax update="@composite"/>
                                </cui:commandButton>
                                <cui:commandButton id="delete" size="lg" state="link" icon="cui-icon-bin"
                                                   actionListener="#{cc.attrs.model.markForDelete(item)}" type="button"
                                                   rendered="#{cc.isDeleteButtonVisibleForItem(item) and cc.attrs.model.isDeletable(item.wrapped)}"
                                                   immediate="true" titleKey="common.button.delete">
                                    <p:ajax update="@composite"/>
                                </cui:commandButton>
                                <cui:commandButton id="locked" size="lg" state="link" icon="cui-icon-lock"
                                                   type="button" disabled="true"
                                                   rendered="#{cc.isDeleteButtonVisibleForItem(item) and not cc.attrs.model.isDeletable(item.wrapped)}"
                                                   titleKey="common.button.delete">
                                </cui:commandButton>
                                <cui:commandButton size="lg" state="link" icon="cui-icon-restart"
                                                   actionListener="#{cc.attrs.model.undoMarkForDelete(item)}"
                                                   rendered="#{cc.isUndoButtonVisibleForItem(item)}" id="undoDelete"
                                                   immediate="true" type="button"
                                                   titleKey="common.button.undo">
                                    <p:ajax update="@composite"/>
                                </cui:commandButton>
                            </div>
                        </ui:fragment>
                    </li>
                </ui:fragment>
            </ui:repeat>

            <ui:fragment rendered="#{cc.emptyMessageRendered}">
                <li class="list-group-item"><h:outputText value="#{cc.resolvedEmptyMessage}"/></li>
            </ui:fragment>
        </ul>

        <!-- validation message -->
        <div class="help-block" aria-live="polite">
            <h:message for="validator" styleClass="cui_msg_error"/>
        </div>
    </div>
</composite:implementation>
</html>
